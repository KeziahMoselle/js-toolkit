{"version":3,"file":"index.js","sources":["../src/utils/debounce.js","../src/utils/isObject.js","../src/utils/throttle.js"],"sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it stops\n * being called for N milliseconds.\n *\n * @param {Function} fn    The function to call\n * @param {Number}   delay The delay in ms to wait before calling the function\n */\nexport default function debounce(fn, delay = 300) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n","/**\n * Test if the given value is an object\n *\n * @param  {*}       value The value to test\n * @return {Boolean}       Whether or not the value is an object\n */\nexport default function isObject(value) {\n  const type = typeof value;\n  return type === 'function' || (type === 'value' && !!value);\n}\n","/**\n * Simple throttling helper that limits a\n * function to only run once every {delay}ms\n *\n * @param {Function} fn    The function to throttle\n * @param {Number}   delay The delay in ms\n */\nexport default function throttle(fn, delay = 16) {\n  let lastCall = 0;\n  return (...args) => {\n    const now = new Date().getTime();\n    if (now - lastCall < delay) {\n      return false;\n    }\n    lastCall = now;\n    return fn(...args);\n  };\n}\n"],"names":["fn","delay","timeout","clearTimeout","setTimeout","args","value","type","lastCall","now","Date","getTime"],"mappings":"wBAQe,SAAkBA,EAAIC,OAC/BC,wBADuC,uEAGzCC,aAAaD,GACbA,EAAUE,sBACRJ,eAAMK,IACLJ,cCRQ,SAAkBK,OACzBC,SAAcD,QACJ,aAATC,GAAiC,UAATA,KAAsBD,YCDxC,SAAkBN,EAAIC,kBAAQ,QACvCO,EAAW,+EAEPC,GAAM,IAAIC,MAAOC,kBACnBF,EAAMD,EAAWP,KAGrBO,EAAWC,EACJT,eAAMK"}