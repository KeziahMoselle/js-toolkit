{"version":3,"sources":["../../src/utils/focusTrap.js"],"names":["keyCodes","FOCUSABLE_ELEMENTS","useFocusTrap","focusedBefore","saveActiveElement","document","activeElement","trap","element","event","keyCode","TAB","focusableChildren","Array","from","querySelectorAll","join","focusedItemIndex","HTMLElement","indexOf","length","focus","preventDefault","shiftKey","untrap"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAMC,kBAAkB,GAAG,CACzB,2CADyB,EAEzB,8CAFyB,EAGzB,oCAHyB,EAIzB,qCAJyB,EAKzB,uCALyB,EAMzB,qCANyB,EAOzB,0CAPyB,EAQzB,yCARyB,EASzB,yCATyB,EAUzB,qDAVyB,EAWzB,8CAXyB,CAA3B;AAcA;;;;;;AAKA,eAAe,SAASC,YAAT,GAAwB;AACrC,MAAIC,aAAJ;AAEA;;;;;;AAKA,WAASC,iBAAT,GAA6B;AAC3BD,IAAAA,aAAa,GAAGE,QAAQ,CAACC,aAAzB;AACD;AAED;;;;;;;;;AAOA,WAASC,IAAT,CAAcC,OAAd,EAAuBC,KAAvB,EAA8B;AAC5B,QAAIA,KAAK,CAACC,OAAN,KAAkBV,QAAQ,CAACW,GAA/B,EAAoC;AAClC;AACD,KAH2B,CAK5B;;;AACA,QAAI,CAACR,aAAL,EAAoB;AAClBA,MAAAA,aAAa,GAAGE,QAAQ,CAACC,aAAzB;AACD;AAED;;;AACA,QAAMM,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWN,OAAO,CAACO,gBAAR,CAAyBd,kBAAkB,CAACe,IAAnB,CAAwB,IAAxB,CAAzB,CAAX,CAA1B;AACA,QAAMC,gBAAgB,GACpBZ,QAAQ,CAACC,aAAT,YAAkCY,WAAlC,GACIN,iBAAiB,CAACO,OAAlB,CAA0Bd,QAAQ,CAACC,aAAnC,CADJ,GAEI,CAAC,CAHP;;AAKA,QAAI,CAACM,iBAAiB,CAACQ,MAAvB,EAA+B;AAC7B;AACD;;AAED,QAAIH,gBAAgB,GAAG,CAAvB,EAA0B;AACxBL,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,KAArB;AACAZ,MAAAA,KAAK,CAACa,cAAN;AACD,KAxB2B,CA0B5B;AACA;AACA;;;AACA,QAAIb,KAAK,CAACc,QAAN,IAAkBN,gBAAgB,KAAK,CAA3C,EAA8C;AAC5CL,MAAAA,iBAAiB,CAACA,iBAAiB,CAACQ,MAAlB,GAA2B,CAA5B,CAAjB,CAAgDC,KAAhD;AACAZ,MAAAA,KAAK,CAACa,cAAN;AACD,KAHD,CAKA;AACA;AACA;AAPA,SAQK,IAAI,CAACb,KAAK,CAACc,QAAP,IAAmBN,gBAAgB,KAAKL,iBAAiB,CAACQ,MAAlB,GAA2B,CAAvE,EAA0E;AAC7ER,QAAAA,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,KAArB;AACAZ,QAAAA,KAAK,CAACa,cAAN;AACD;AACF;AAED;;;;;;;AAKA,WAASE,MAAT,GAAkB;AAChB,QAAIrB,aAAa,IAAI,OAAOA,aAAa,CAACkB,KAArB,KAA+B,UAApD,EAAgE;AAC9DlB,MAAAA,aAAa,CAACkB,KAAd;AACAlB,MAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,SAAO;AAAEI,IAAAA,IAAI,EAAJA,IAAF;AAAQiB,IAAAA,MAAM,EAANA,MAAR;AAAgBpB,IAAAA,iBAAiB,EAAjBA;AAAhB,GAAP;AACD","sourcesContent":["import keyCodes from './keyCodes';\n\nconst FOCUSABLE_ELEMENTS = [\n  'a[href]:not([tabindex^=\"-\"]):not([inert])',\n  'area[href]:not([tabindex^=\"-\"]):not([inert])',\n  'input:not([disabled]):not([inert])',\n  'select:not([disabled]):not([inert])',\n  'textarea:not([disabled]):not([inert])',\n  'button:not([disabled]):not([inert])',\n  'iframe:not([tabindex^=\"-\"]):not([inert])',\n  'audio:not([tabindex^=\"-\"]):not([inert])',\n  'video:not([tabindex^=\"-\"]):not([inert])',\n  '[contenteditable]:not([tabindex^=\"-\"]):not([inert])',\n  '[tabindex]:not([tabindex^=\"-\"]):not([inert])',\n];\n\n/**\n * Use a trap/untrap tabs logic.\n *\n * @return {Object} An object containing the trap and untrap methods.\n */\nexport default function useFocusTrap() {\n  let focusedBefore;\n\n  /**\n   * Save the current active element.\n   *\n   * @return {void}\n   */\n  function saveActiveElement() {\n    focusedBefore = document.activeElement;\n  }\n\n  /**\n   * Trap tab navigation inside the given element.\n   *\n   * @param  {HTMLElement} element The element in which to trap the tabulations.\n   * @param  {KeyboardEvent}       event   The keydown or keyup event.\n   * @return {void}\n   */\n  function trap(element, event) {\n    if (event.keyCode !== keyCodes.TAB) {\n      return;\n    }\n\n    // Save the previous focused element\n    if (!focusedBefore) {\n      focusedBefore = document.activeElement;\n    }\n\n    /** @type {Array<HTMLElement>} */\n    const focusableChildren = Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS.join(', ')));\n    const focusedItemIndex =\n      document.activeElement instanceof HTMLElement\n        ? focusableChildren.indexOf(document.activeElement)\n        : -1;\n\n    if (!focusableChildren.length) {\n      return;\n    }\n\n    if (focusedItemIndex < 0) {\n      focusableChildren[0].focus();\n      event.preventDefault();\n    }\n\n    // If the SHIFT key is being pressed while tabbing (moving backwards) and\n    // the currently focused item is the first one, move the focus to the last\n    // focusable item from the dialog element\n    if (event.shiftKey && focusedItemIndex === 0) {\n      focusableChildren[focusableChildren.length - 1].focus();\n      event.preventDefault();\n    }\n\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n    else if (!event.shiftKey && focusedItemIndex === focusableChildren.length - 1) {\n      focusableChildren[0].focus();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Untrap the tab navigation.\n   *\n   * @return {void}\n   */\n  function untrap() {\n    if (focusedBefore && typeof focusedBefore.focus === 'function') {\n      focusedBefore.focus();\n      focusedBefore = null;\n    }\n  }\n\n  return { trap, untrap, saveActiveElement };\n}\n"],"file":"focusTrap.js"}