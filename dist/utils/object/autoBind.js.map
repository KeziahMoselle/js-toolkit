{"version":3,"sources":["../../../src/utils/object/autoBind.js"],"names":["autoBind","instance","include","exclude","filter","key","match","pattern","test","some","forEach","object","descriptor","Object","getOwnPropertyDescriptor","value","bind"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;AAQe,SAASA,QAAT,CAAkBC,QAAlB,EAAuD;AAAA,iFAAJ,EAAI;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,OAAgB,QAAhBA,OAAgB;;AACpE,MAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,GAAG,EAAI;AACpB,QAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,OAAO;AAAA,aAAK,OAAOA,OAAP,KAAmB,QAAnB,GAA8BF,GAAG,KAAKE,OAAtC,GAAgDA,OAAO,CAACC,IAAR,CAAaH,GAAb,CAArD;AAAA,KAArB;;AAEA,QAAIH,OAAJ,EAAa;AACX,aAAOA,OAAO,CAACO,IAAR,CAAaH,KAAb,CAAP;AACD;;AAED,QAAIH,OAAJ,EAAa;AACX,aAAO,CAACA,OAAO,CAACM,IAAR,CAAaH,KAAb,CAAR;AACD;;AAED,WAAO,IAAP;AACD,GAZD;;AAcA,iCAAiBL,QAAjB,EACGG,MADH,CACU;AAAA;AAAA,QAAEC,GAAF;;AAAA,WAAWA,GAAG,KAAK,aAAR,IAAyBD,MAAM,CAACC,GAAD,CAA1C;AAAA,GADV,EAEGK,OAFH,CAEW,iBAAmB;AAAA;AAAA,QAAjBL,GAAiB;AAAA,QAAZM,MAAY;;AAC1B,QAAMC,UAAU,GAAGC,MAAM,CAACC,wBAAP,CAAgCH,MAAhC,EAAwCN,GAAxC,CAAnB;;AACA,QAAIO,UAAU,IAAI,OAAOA,UAAU,CAACG,KAAlB,KAA4B,UAA9C,EAA0D;AACxDd,MAAAA,QAAQ,CAACI,GAAD,CAAR,GAAgBJ,QAAQ,CAACI,GAAD,CAAR,CAAcW,IAAd,CAAmBf,QAAnB,CAAhB;AACD;AACF,GAPH;AASA,SAAOA,QAAP;AACD","sourcesContent":["import getAllProperties from './getAllProperties';\n\n/**\n * Auto-bind methods to an instance.\n *\n * @param  {Object}               instance        The instance.\n * @param  {Array<String|RegExp>} options.include Methods to include.\n * @param  {Array<String|RegExp>} options.exclude Methods to exclude.\n * @return {Object}                               The instance.\n */\nexport default function autoBind(instance, { include, exclude } = {}) {\n  const filter = key => {\n    const match = pattern => (typeof pattern === 'string' ? key === pattern : pattern.test(key));\n\n    if (include) {\n      return include.some(match);\n    }\n\n    if (exclude) {\n      return !exclude.some(match);\n    }\n\n    return true;\n  };\n\n  getAllProperties(instance)\n    .filter(([key]) => key !== 'constructor' && filter(key))\n    .forEach(([key, object]) => {\n      const descriptor = Object.getOwnPropertyDescriptor(object, key);\n      if (descriptor && typeof descriptor.value === 'function') {\n        instance[key] = instance[key].bind(instance);\n      }\n    });\n\n  return instance;\n}\n"],"file":"autoBind.js"}