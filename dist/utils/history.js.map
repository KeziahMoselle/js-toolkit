{"version":3,"sources":["../../src/utils/history.js"],"names":["isObject","updateUrlSearchParam","params","name","value","undefined","has","delete","Array","isArray","forEach","val","index","arrayName","Object","entries","key","objectName","set","objectToURLSearchParams","obj","defaultSearch","window","location","search","reduce","urlSearchParams","URLSearchParams","updateHistory","mode","options","data","title","history","path","pathname","hash","url","mergedSearch","toString","startsWith","method","push","replace"],"mappings":"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","sourcesContent":["import isObject from './object/isObject';\n\n/**\n * @typedef {Object} HistoryOptions\n * @property {string=} [path]\n * @property {URLSearchParams|{ [key:string]: unknown }=} [search]\n * @property {string=} [hash]\n */\n\n/**\n * Set a param in a URLSearchParam instance.\n * @param  {URLSearchParams}                    params The params to update.\n * @param  {string}                             name   The name of the param to update.\n * @param  {string|number|boolean|Array|Object} value  The value for this param.\n * @return {URLSearchParams}                           The updated URLSearchParams instance.\n */\nfunction updateUrlSearchParam(params, name, value) {\n  if (value === '' || value === null || value === undefined) {\n    if (params.has(name)) {\n      params.delete(name);\n    }\n    return params;\n  }\n\n  if (Array.isArray(value)) {\n    value.forEach((val, index) => {\n      const arrayName = `${name}[${index}]`;\n      updateUrlSearchParam(params, arrayName, val);\n    });\n    return params;\n  }\n\n  if (isObject(value)) {\n    Object.entries(value).forEach(([key, val]) => {\n      const objectName = `${name}[${key}]`;\n      updateUrlSearchParam(params, objectName, val);\n    });\n    return params;\n  }\n\n  params.set(name, value);\n  return params;\n}\n\n/**\n * Transform an object to an URLSearchParams instance.\n *\n * @param  {Object}          obj           The object to convert.\n * @param  {string}          defaultSearch A string of defaults search params.\n * @return {URLSearchParams}\n */\nfunction objectToURLSearchParams(obj, defaultSearch = window.location.search) {\n  return Object.entries(obj).reduce(\n    (urlSearchParams, [name, value]) => updateUrlSearchParam(urlSearchParams, name, value),\n    new URLSearchParams(defaultSearch)\n  );\n}\n\n/**\n * Update the history with a new state.\n * @param {string}         mode\n * @param {HistoryOptions} options\n * @param {Object}         [data]\n * @param {string}         [title]\n */\nfunction updateHistory(mode, options, data = {}, title = '') {\n  if (!window.history) {\n    return;\n  }\n\n  /** @type {HistoryOptions} */\n  const { path, search, hash } = {\n    path: window.location.pathname,\n    search: new URLSearchParams(window.location.search),\n    hash: window.location.hash,\n    ...options,\n  };\n\n  let url = path;\n\n  const mergedSearch = search instanceof URLSearchParams ? search : objectToURLSearchParams(search);\n\n  if (mergedSearch.toString()) {\n    url += `?${mergedSearch.toString()}`;\n  }\n\n  if (hash) {\n    if (hash.startsWith('#')) {\n      url += hash;\n    } else {\n      url += `#${hash}`;\n    }\n  }\n\n  const method = `${mode}State`;\n  window.history[method](data, title, url);\n}\n\n/**\n * Push a new state.\n *\n * @param {HistoryOptions} options The new state.\n * @param {Object}         data    The data for the new state.\n * @param {string}         title   The title for the new state.\n */\nexport function push(options, data, title) {\n  updateHistory('push', options, data, title);\n}\n\n/**\n * Replace a new state.\n *\n * @param {HistoryOptions} options The new state.\n * @param {Object}         data    The data for the new state.\n * @param {string}         title   The title for the new state.\n */\nexport function replace(options, data, title) {\n  updateHistory('replace', options, data, title);\n}\n"],"file":"history.js"}