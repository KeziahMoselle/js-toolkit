{"version":3,"sources":["../../src/utils/throttle.js"],"names":["throttle","fn","delay","lastCall","throttled","now","Date","getTime"],"mappings":"AAOA,eAAe,SAASA,QAAT,CAAkBC,EAAlB,EAAkC;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AAC/C,MAAIC,QAAQ,GAAG,CAAf;AACA,SAAO,SAASC,SAAT,GAA4B;AACjC,QAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;;AACA,QAAIF,GAAG,GAAGF,QAAN,GAAiBD,KAArB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AACDC,IAAAA,QAAQ,GAAGE,GAAX;AACA,WAAOJ,EAAE,MAAF,mBAAP;AACD,GAPD;AAQD","sourcesContent":["/**\n * Simple throttling helper that limits a function to only run once every {delay}ms.\n *\n * @param {Function} fn The function to throttle\n * @param {Number=} [delay=16] The delay in ms\n * @return {Function} The throttled function.\n */\nexport default function throttle(fn, delay = 16) {\n  let lastCall = 0;\n  return function throttled(...args) {\n    const now = new Date().getTime();\n    if (now - lastCall < delay) {\n      return false;\n    }\n    lastCall = now;\n    return fn(...args);\n  };\n}\n"],"file":"throttle.js"}