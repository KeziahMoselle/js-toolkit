{"version":3,"sources":["../../src/utils/debounce.js"],"names":["debounce","fn","delay","timeout","args","clearTimeout","setTimeout"],"mappings":";;;;;;;AAAA;;;;;;;;AAQe,SAASA,QAAT,CAAkBC,EAAlB,EAAmC;AAAA,MAAbC,KAAa,uEAAL,GAAK;AAChD,MAAIC,OAAJ;AACA,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAClBC,IAAAA,YAAY,CAACF,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGG,UAAU,CAAC,YAAM;AACzBL,MAAAA,EAAE,MAAF,SAAMG,IAAN;AACD,KAFmB,EAEjBF,KAFiB,CAApB;AAGD,GALD;AAMD","sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it stops\n * being called for N milliseconds.\n *\n * @param {Function} fn    The function to call\n * @param {Number}   delay The delay in ms to wait before calling the function\n */\nexport default function debounce(fn, delay = 300) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n"],"file":"debounce.js"}