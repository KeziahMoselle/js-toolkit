{"version":3,"sources":["../../src/utils/debounce.js"],"names":["debounce","fn","delay","timeout","debounced","args","clearTimeout","setTimeout"],"mappings":"AASA,eAAe,SAASA,QAAT,CAAkBC,EAAlB,EAAmC;AAAA,MAAbC,KAAa,uEAAL,GAAK;AAChD,MAAIC,OAAJ;AACA,SAAO,SAASC,SAAT,GAA4B;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACjCC,IAAAA,YAAY,CAACH,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGI,UAAU,CAAC,YAAM;AACzBN,MAAAA,EAAE,MAAF,SAAMI,IAAN;AACD,KAFmB,EAEjBH,KAFiB,CAApB;AAGD,GALD;AAMD","sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked,\n * will not be triggered. The function will be called after it stops\n * being called for N milliseconds.\n *\n * @param {Function} fn The function to call.\n * @param {Number=} [delay=300] The delay in ms to wait before calling the function.\n * @return {Function} The debounced function.\n */\nexport default function debounce(fn, delay = 300) {\n  let timeout;\n  return function debounced(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fn(...args);\n    }, delay);\n  };\n}\n"],"file":"debounce.js"}