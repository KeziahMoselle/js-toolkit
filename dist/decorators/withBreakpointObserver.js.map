{"version":3,"sources":["../../src/decorators/withBreakpointObserver.js"],"names":["testBreakpoints","instance","breakpoint","props","$options","activeBreakpoints","inactiveBreakpoints","isInActiveBreakpoint","split","includes","isInInactiveBreakpoint","hasBreakpointConfiguration","Boolean","hasConflictingBreakpointConfiguration","BaseClass","element","add","name","Error","$id","action"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;;;AAMA,SAASA,eAAT,CAAyBC,QAAzB,EAAgF;AAAA,MAA7CC,UAA6C,uEAAhC,uBAAYC,KAAZ,GAAoBD,UAAY;AAAA,2BAC3BD,QAAQ,CAACG,QADkB;AAAA,MACtEC,iBADsE,sBACtEA,iBADsE;AAAA,MACnDC,mBADmD,sBACnDA,mBADmD;AAE9E,MAAMC,oBAAoB,GACxBF,iBAAiB,IAAIA,iBAAiB,CAACG,KAAlB,CAAwB,GAAxB,EAA6BC,QAA7B,CAAsCP,UAAtC,CADvB;AAEA,MAAMQ,sBAAsB,GAC1BJ,mBAAmB,IAAIA,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,EAA+BC,QAA/B,CAAwCP,UAAxC,CADzB;;AAGA,MACGG,iBAAiB,IAAIE,oBAAtB,IACCD,mBAAmB,IAAI,CAACI,sBAF3B,EAGE;AACA,WAAO,QAAP;AACD;;AAED,MACGL,iBAAiB,IAAI,CAACE,oBAAvB,IACCD,mBAAmB,IAAII,sBAF1B,EAGE;AACA,WAAO,UAAP;AACD;;AAED,SAAO,EAAP;AACD;AAED;;;;;;;AAKA,SAASC,0BAAT,CAAoCV,QAApC,EAA8C;AAAA,4BACOA,QAAQ,CAACG,QADhB;AAAA,MACpCC,iBADoC,uBACpCA,iBADoC;AAAA,MACjBC,mBADiB,uBACjBA,mBADiB;AAE5C,SAAOM,OAAO,CAACP,iBAAiB,IAAIC,mBAAtB,CAAd;AACD;AAED;;;;;;;AAKA,SAASO,qCAAT,CAA+CZ,QAA/C,EAAyD;AAAA,4BACJA,QAAQ,CAACG,QADL;AAAA,MAC/CC,iBAD+C,uBAC/CA,iBAD+C;AAAA,MAC5BC,mBAD4B,uBAC5BA,mBAD4B;AAEvD,SAAOM,OAAO,CAACP,iBAAiB,IAAIC,mBAAtB,CAAd;AACD;AAED;;;;;eAGe,kBAAAQ,SAAS;AAAA;AAAA;;AAAA;;AAEpB;;;;;AAKA,gCAAYC,OAAZ,EAAqB;AAAA;;AAAA;AACnB,gCAAMA,OAAN;;AADmB,uBAGI,sBAHJ;AAAA,UAGXC,GAHW,cAGXA,GAHW;AAAA,UAGNb,KAHM,cAGNA,KAHM;;AAAA,UAIXc,IAJW,GAIF,MAAKb,QAJH,CAIXa,IAJW,EAMnB;AACA;;AACA,UAAI,CAACd,KAAK,GAAGD,UAAb,EAAyB;AACvB,cAAM,IAAIgB,KAAJ,YACAD,IADA,0EAAN;AAGD,OAZkB,CAcnB;;;AACA,UAAI,CAACN,0BAA0B,6CAA/B,EAAuC;AACrC;AACD,OAjBkB,CAmBnB;;;AACA,UAAIE,qCAAqC,6CAAzC,EAAiD;AAC/C,cAAM,IAAIK,KAAJ,YACAD,IADA,uGAAN;AAGD;;AAEDD,MAAAA,GAAG,8BAAuB,MAAKG,GAA5B,GAAmC,gBAAoB;AAAA,YAAjBjB,UAAiB,QAAjBA,UAAiB;AACxD,YAAMkB,MAAM,GAAGpB,eAAe,8CAAOE,UAAP,CAA9B;;AACA,YAAIkB,MAAJ,EAAY;AACV,gBAAKA,MAAL;AACD;AACF,OALE,CAAH;AAOA;AACD;AAED;;;;;;;AA3CoB;AAAA;AAAA,+BAgDX;AACP;AACA,YAAI,CAACT,0BAA0B,CAAC,IAAD,CAA/B,EAAuC;AACrC;AACD;;AAED,YAAMS,MAAM,GAAGpB,eAAe,CAAC,IAAD,CAA9B;;AACA,YAAIoB,MAAM,KAAK,QAAf,EAAyB;AACvB;AACD;;AAED,eAAO,IAAP;AACD;AA5DmB;AAAA;AAAA,IACWN,SADX;AAAA,C","sourcesContent":["import useResize from '../services/resize';\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {BreakpointObserver} instance The component's instance.\n * @return {Sring}                       The action to trigger.\n */\nfunction testBreakpoints(instance, breakpoint = useResize().props().breakpoint) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  const isInActiveBreakpoint =\n    activeBreakpoints && activeBreakpoints.split(' ').includes(breakpoint);\n  const isInInactiveBreakpoint =\n    inactiveBreakpoints && inactiveBreakpoints.split(' ').includes(breakpoint);\n\n  if (\n    (activeBreakpoints && isInActiveBreakpoint) ||\n    (inactiveBreakpoints && !isInInactiveBreakpoint)\n  ) {\n    return '$mount';\n  }\n\n  if (\n    (activeBreakpoints && !isInActiveBreakpoint) ||\n    (inactiveBreakpoints && isInInactiveBreakpoint)\n  ) {\n    return '$destroy';\n  }\n\n  return '';\n}\n\n/**\n * Test if the given instance is configured for breakpoints.\n * @param  {Base}    instance A Base class instance.\n * @return {Boolean}          True if configured correctly, false otherwise.\n */\nfunction hasBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  return Boolean(activeBreakpoints || inactiveBreakpoints);\n}\n\n/**\n * Test if the given instance has a conflicting configuration for breakpoints.\n * @param  {Base}    instance A Base class instance.\n * @return {Boolean}          True if configured incorrectly, false otherwise.\n */\nfunction hasConflictingBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  return Boolean(activeBreakpoints && inactiveBreakpoints);\n}\n\n/**\n * BreakpointObserver class.\n */\nexport default BaseClass =>\n  class BreakpointObserver extends BaseClass {\n    /**\n     * Watch for the document resize to test the breakpoints.\n     * @param  {HTMLElement} element The component's root element.\n     * @return {BreakpointObserver}          The current instance.\n     */\n    constructor(element) {\n      super(element);\n\n      const { add, props } = useResize();\n      const { name } = this.$options;\n\n      // Do nothing if no breakpoint has been defined.\n      // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n      if (!props().breakpoint) {\n        throw new Error(\n          `[${name}] The \\`BreakpointObserver\\` class requires breakpoints to be defined.`\n        );\n      }\n\n      // Stop here silently when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return this;\n      }\n\n      // Do nothing if both configuration are set, as they are not compatible.\n      if (hasConflictingBreakpointConfiguration(this)) {\n        throw new Error(\n          `[${name}]  Incorrect configuration: the \\`activeBreakpoints\\` and \\`inactiveBreakpoints\\` are not compatible.`\n        );\n      }\n\n      add(`BreakpointObserver-${this.$id}`, ({ breakpoint }) => {\n        const action = testBreakpoints(this, breakpoint);\n        if (action) {\n          this[action]();\n        }\n      });\n\n      return this;\n    }\n\n    /**\n     * Override the default $mount method to prevent component's from being\n     * mounted when they should not.\n     * @return {BreakpointObserver} The component's instance.\n     */\n    $mount() {\n      // Execute normal behavior when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return super.$mount();\n      }\n\n      const action = testBreakpoints(this);\n      if (action === '$mount') {\n        return super.$mount();\n      }\n\n      return this;\n    }\n  };\n"],"file":"withBreakpointObserver.js"}