{"version":3,"sources":["../../src/decorators/withBreakpointObserver.js"],"names":["useResize","testBreakpoints","instance","breakpoint","props","$options","activeBreakpoints","inactiveBreakpoints","isInActiveBreakpoint","split","includes","isInInactiveBreakpoint","hasBreakpointConfiguration","Boolean","testConflictingBreakpointConfiguration","name","Error","addToResize","key","add","has","onResize","action","$isMounted","setTimeout","BaseClass","element","remove","$id","mutationObserver","MutationObserver","mutation","type","attributeName","startsWith","$mount","observe","$el","attributes","config","options","String"],"mappings":"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","sourcesContent":["import useResize from '../services/resize';\n\n/**\n * @typedef {import('../abstracts/Base').default} Base\n * @typedef {import('../abstracts/Base').BaseComponent} BaseComponent\n */\n\n/**\n * @typedef {Object} WithBreakpointObserverOptions\n * @property {String} [activeBreakpoints]\n * @property {String} [inactiveBreakpoints]\n */\n\n/**\n * @typedef {Object} WithBreakpointObserverInterface\n * @property {WithBreakpointObserverOptions} $options\n */\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {Base & WithBreakpointObserverInterface}   instance The component's instance.\n * @return {String}          The action to trigger.\n */\nfunction testBreakpoints(instance, breakpoint = useResize().props().breakpoint) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  const isInActiveBreakpoint =\n    activeBreakpoints && activeBreakpoints.split(' ').includes(breakpoint);\n  const isInInactiveBreakpoint =\n    inactiveBreakpoints && inactiveBreakpoints.split(' ').includes(breakpoint);\n\n  if (\n    (activeBreakpoints && isInActiveBreakpoint) ||\n    (inactiveBreakpoints && !isInInactiveBreakpoint)\n  ) {\n    return '$mount';\n  }\n\n  return '$destroy';\n}\n\n/**\n * Test if the given instance is configured for breakpoints.\n * @param  {Base & WithBreakpointObserverInterface}    instance A Base class instance.\n * @return {Boolean}          True if configured correctly, false otherwise.\n */\nfunction hasBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  return Boolean(activeBreakpoints || inactiveBreakpoints);\n}\n\n/**\n * Test if the given instance has a conflicting configuration for breakpoints.\n * @param  {Base & WithBreakpointObserverInterface} instance A Base class instance.\n * @return {void}\n */\nfunction testConflictingBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints, name } = instance.$options;\n  if (activeBreakpoints && inactiveBreakpoints) {\n    throw new Error(\n      `[${name}] Incorrect configuration: the \\`activeBreakpoints\\` and \\`inactiveBreakpoints\\` are not compatible.`\n    );\n  }\n}\n\n/**\n * Add the current instance to the resize service.\n * @param {String} key      The key for the resize service callback.\n * @param {Base}   instance The instance to observe.\n */\nfunction addToResize(key, instance) {\n  testConflictingBreakpointConfiguration(instance);\n  const { add, has } = useResize();\n\n  if (!has(key)) {\n    add(key, function onResize({ breakpoint }) {\n      const action = testBreakpoints(instance, breakpoint);\n\n      // Always destroy before mounting\n      if (action === '$destroy' && instance.$isMounted) {\n        instance[action]();\n      } else if (action === '$mount' && !instance.$isMounted) {\n        setTimeout(() => instance[action](), 0);\n      }\n    });\n  }\n}\n\n/**\n * BreakpointObserver class.\n *\n * @param {BaseComponent} BaseClass The Base class to extend from.\n * @return {BaseComponent}\n */\nexport default (BaseClass) =>\n  class BreakpointObserver extends BaseClass {\n    static config = {\n      ...(BaseClass.config || {}),\n      name: `${BaseClass?.config?.name ?? ''}WithBreakpointObserver`,\n      options: {\n        ...(BaseClass?.config?.options || {}),\n        activeBreakpoints: String,\n        inactiveBreakpoints: String,\n      },\n    };\n\n    /**\n     * Watch for the document resize to test the breakpoints.\n     * @this {Base & WithBreakpointObserverInterface}\n     * @param  {HTMLElement} element The component's root element.\n     */\n    constructor(element) {\n      super(element);\n\n      const { remove, props } = useResize();\n      const { name } = this.$options;\n\n      // Do nothing if no breakpoint has been defined.\n      // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n      if (!props().breakpoint) {\n        throw new Error(\n          `[${name}] The \\`BreakpointObserver\\` class requires breakpoints to be defined.`\n        );\n      }\n\n      const key = `BreakpointObserver-${this.$id}`;\n\n      // Watch change on the `data-options` attribute to emit the `set:options` event.\n      const mutationObserver = new MutationObserver(([mutation]) => {\n        if (\n          mutation.type === 'attributes' &&\n          (mutation.attributeName === 'data-options' ||\n            mutation.attributeName.startsWith('data-option-'))\n        ) {\n          // Stop here silently when no breakpoint configuration given.\n          if (!hasBreakpointConfiguration(this)) {\n            this.$mount();\n            remove(key);\n            return;\n          }\n\n          addToResize(key, this);\n        }\n      });\n      mutationObserver.observe(this.$el, { attributes: true });\n\n      // Stop here silently when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return this;\n      }\n\n      addToResize(key, this);\n      return this;\n    }\n\n    /**\n     * Override the default $mount method to prevent component's from being\n     * mounted when they should not.\n     * @return {this}\n     */\n    $mount() {\n      // Execute normal behavior when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return super.$mount();\n      }\n\n      const action = testBreakpoints(this);\n      if (action === '$mount') {\n        return super.$mount();\n      }\n\n      return this;\n    }\n  };\n"],"file":"withBreakpointObserver.js"}