{"version":3,"sources":["../../src/decorators/withBreakpointObserver.js"],"names":["useResize","testBreakpoints","instance","breakpoint","props","$options","activeBreakpoints","inactiveBreakpoints","isInActiveBreakpoint","split","includes","isInInactiveBreakpoint","hasBreakpointConfiguration","Boolean","testConflictingBreakpointConfiguration","name","Error","BaseClass","element","add","has","remove","key","$id","mutationObserver","MutationObserver","mutation","type","attributeName","$mount","action","observe","$el","attributes"],"mappings":"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","sourcesContent":["import useResize from '../services/resize';\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {BreakpointObserver} instance The component's instance.\n * @return {Sring}                       The action to trigger.\n */\nfunction testBreakpoints(instance, breakpoint = useResize().props().breakpoint) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  const isInActiveBreakpoint =\n    activeBreakpoints && activeBreakpoints.split(' ').includes(breakpoint);\n  const isInInactiveBreakpoint =\n    inactiveBreakpoints && inactiveBreakpoints.split(' ').includes(breakpoint);\n\n  if (\n    (activeBreakpoints && isInActiveBreakpoint) ||\n    (inactiveBreakpoints && !isInInactiveBreakpoint)\n  ) {\n    return '$mount';\n  }\n\n  return '$destroy';\n}\n\n/**\n * Test if the given instance is configured for breakpoints.\n * @param  {Base}    instance A Base class instance.\n * @return {Boolean}          True if configured correctly, false otherwise.\n */\nfunction hasBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  return Boolean(activeBreakpoints || inactiveBreakpoints);\n}\n\n/**\n * Test if the given instance has a conflicting configuration for breakpoints.\n * @param  {Base} instance A Base class instance.\n * @return {void}\n */\nfunction testConflictingBreakpointConfiguration(instance) {\n  const { activeBreakpoints, inactiveBreakpoints, name } = instance.$options;\n  if (activeBreakpoints && inactiveBreakpoints) {\n    throw new Error(\n      `[${name}] Incorrect configuration: the \\`activeBreakpoints\\` and \\`inactiveBreakpoints\\` are not compatible.`\n    );\n  }\n}\n\n/**\n * BreakpointObserver class.\n */\nexport default (BaseClass) =>\n  class BreakpointObserver extends BaseClass {\n    /**\n     * Watch for the document resize to test the breakpoints.\n     * @param  {HTMLElement} element The component's root element.\n     * @return {BreakpointObserver}          The current instance.\n     */\n    constructor(element) {\n      super(element);\n\n      const { add, has, remove, props } = useResize();\n      const { name } = this.$options;\n\n      // Do nothing if no breakpoint has been defined.\n      // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n      if (!props().breakpoint) {\n        throw new Error(\n          `[${name}] The \\`BreakpointObserver\\` class requires breakpoints to be defined.`\n        );\n      }\n\n      const key = `BreakpointObserver-${this.$id}`;\n\n      // Watch change on the `data-options` attribute to emit the `set:options` event.\n      const mutationObserver = new MutationObserver(([mutation]) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-options') {\n          // Stop here silently when no breakpoint configuration given.\n          if (!hasBreakpointConfiguration(this)) {\n            this.$mount();\n            remove(key);\n            return;\n          }\n\n          testConflictingBreakpointConfiguration(this);\n\n          if (!has(key)) {\n            add(key, ({ breakpoint }) => {\n              const action = testBreakpoints(this, breakpoint);\n              this[action]();\n            });\n          }\n        }\n      });\n      mutationObserver.observe(this.$el, { attributes: true });\n\n      // Stop here silently when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return this;\n      }\n\n      testConflictingBreakpointConfiguration(this);\n      add(key, ({ breakpoint }) => {\n        const action = testBreakpoints(this, breakpoint);\n        this[action]();\n      });\n\n      return this;\n    }\n\n    /**\n     * Override the default $mount method to prevent component's from being\n     * mounted when they should not.\n     * @return {BreakpointObserver} The component's instance.\n     */\n    $mount() {\n      // Execute normal behavior when no breakpoint configuration given.\n      if (!hasBreakpointConfiguration(this)) {\n        return super.$mount();\n      }\n\n      const action = testBreakpoints(this);\n      if (action === '$mount') {\n        return super.$mount();\n      }\n\n      return this;\n    }\n  };\n"],"file":"withBreakpointObserver.js"}