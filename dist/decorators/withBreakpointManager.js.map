{"version":3,"sources":["../../src/decorators/withBreakpointManager.js"],"names":["useResize","testBreakpoints","breakpoints","props","breakpoint","forEach","breakpointKeys","instance","includes","$mount","$destroy","mountComponents","map","bk","ComponentClass","child","$el","Object","defineProperty","get","instances","BaseClass","Array","isArray","Error","length","add","element","$id"],"mappings":"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","sourcesContent":["import useResize from '../services/resize';\n\n/**\n * @typedef {import('../abstracts/Base').default} Base\n * @typedef {import('../abstracts/Base').BaseComponent} BaseComponent\n */\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {Array<[String[], Base]>} breakpoints The breakpoints's data.\n */\nfunction testBreakpoints(breakpoints) {\n  const { breakpoint } = useResize().props();\n  breakpoints.forEach(([breakpointKeys, instance]) => {\n    if (breakpointKeys.includes(breakpoint)) {\n      instance.$mount();\n    } else {\n      instance.$destroy();\n    }\n  });\n}\n\n/**\n * Prepare the components.\n * @param {Base} instance\n * @param {Array<[String, BaseComponent]>} breakpoints\n * @return {Array<[String, Base]>}\n */\nfunction mountComponents(instance, breakpoints) {\n  return breakpoints.map(([bk, ComponentClass]) => {\n    const child = new ComponentClass(instance.$el);\n    Object.defineProperty(child, '$parent', { get: () => instance });\n    return [bk, child];\n  });\n}\n\n/**\n * A cache object to hold each Base sub-instances.\n * @type {Object}\n */\nconst instances = {};\n\n/**\n * BreakpointManager class.\n * @param {BaseComponent} BaseClass\n * @param {Array<[String, BaseComponent]>} breakpoints\n * @return {BaseComponent}\n */\nexport default (BaseClass, breakpoints) => {\n  if (!Array.isArray(breakpoints)) {\n    throw new Error('[withBreakpointManager] The `breakpoints` parameter must be an array.');\n  }\n\n  if (breakpoints.length < 2) {\n    throw new Error('[withBreakpointManager] You must define at least 2 breakpoints.');\n  }\n\n  const { add, props } = useResize();\n\n  // Do nothing if no breakpoint has been defined.\n  // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n  if (!props().breakpoint) {\n    throw new Error(`The \\`BreakpointManager\\` class requires breakpoints to be defined.`);\n  }\n\n  return class BreakpointManager extends BaseClass {\n    /**\n     * Watch for the document resize to test the breakpoints.\n     * @this {Base & {}}\n     * @param {HTMLElement} element The component's root element.\n     */\n    constructor(element) {\n      super(element);\n\n      if (!instances[this.$id]) {\n        instances[this.$id] = mountComponents(this, breakpoints);\n      }\n\n      testBreakpoints(instances[this.$id]);\n\n      add(`BreakpointManager-${this.$id}`, () => {\n        testBreakpoints(instances[this.$id]);\n      });\n\n      return this;\n    }\n\n    /**\n     * Override the default $mount method to prevent component's from being\n     * mounted when they should not.\n     * @this {Base}\n     * @return {this}\n     */\n    $mount() {\n      if (!instances[this.$id]) {\n        instances[this.$id] = mountComponents(this, breakpoints);\n      }\n\n      testBreakpoints(instances[this.$id]);\n\n      return super.$mount();\n    }\n\n    /**\n     * Destroy all instances when the main one is destroyed.\n     * @return {this}\n     */\n    $destroy() {\n      if (Array.isArray(instances[this.$id])) {\n        instances[this.$id].forEach(([, instance]) => {\n          instance.$destroy();\n        });\n      }\n\n      return super.$destroy();\n    }\n  };\n};\n"],"file":"withBreakpointManager.js"}