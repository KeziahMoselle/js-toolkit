{"version":3,"sources":["../../src/decorators/withBreakpointManager.js"],"names":["testBreakpoints","breakpoints","props","breakpoint","forEach","breakpointKeys","instance","includes","$mount","$destroy","instances","BaseClass","Array","isArray","Error","length","element","add","name","$options","$id","map","bk","ComponentClass","prototype","__isChild__","$el","Object","defineProperty","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;;;AAMA,SAASA,eAAT,CAAyBC,WAAzB,EAAsC;AAAA,yBACb,uBAAYC,KAAZ,EADa;AAAA,MAC5BC,UAD4B,oBAC5BA,UAD4B;;AAEpCF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,gBAAgC;AAAA;AAAA,QAA9BC,cAA8B;AAAA,QAAdC,QAAc;;AAClD,QAAID,cAAc,CAACE,QAAf,CAAwBJ,UAAxB,CAAJ,EAAyC;AACvCG,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,CAACG,QAAT;AACD;AACF,GAND;AAOD;AAED;;;;;;AAIA,IAAMC,SAAS,GAAG,EAAlB;AAEA;;;;eAGe,kBAACC,SAAD,EAAiC;AAAA,MAArBV,WAAqB,uEAAP,EAAO;;AAC9C,MAAI,CAACW,KAAK,CAACC,OAAN,CAAcZ,WAAd,CAAL,EAAiC;AAC/B,UAAM,IAAIa,KAAJ,CAAU,uEAAV,CAAN;AACD;;AAED,MAAIb,WAAW,CAACc,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAID,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED;AAAA;;AAAA;;AACE;;;;;AAKA,+BAAYE,OAAZ,EAAqB;AAAA;;AAAA;AACnB,gCAAMA,OAAN;;AADmB,uBAGI,sBAHJ;AAAA,UAGXC,GAHW,cAGXA,GAHW;AAAA,UAGNf,KAHM,cAGNA,KAHM;;AAAA,UAIXgB,IAJW,GAIF,MAAKC,QAJH,CAIXD,IAJW,EAMnB;AACA;;AACA,UAAI,CAAChB,KAAK,GAAGC,UAAb,EAAyB;AACvB,cAAM,IAAIW,KAAJ,YACAI,IADA,yEAAN;AAGD;;AAEDR,MAAAA,SAAS,CAAC,MAAKU,GAAN,CAAT,GAAsBnB,WAAW,CAACoB,GAAZ,CAAgB,iBAA0B;AAAA;AAAA,YAAxBC,EAAwB;AAAA,YAApBC,cAAoB;;AAC9D;AACAA,QAAAA,cAAc,CAACC,SAAf,CAAyBC,WAAzB,GAAuC,IAAvC;AACA,YAAMnB,QAAQ,GAAG,IAAIiB,cAAJ,CAAmB,MAAKG,GAAxB,CAAjB;AACAC,QAAAA,MAAM,CAACC,cAAP,CAAsBtB,QAAtB,EAAgC,SAAhC,EAA2C;AAAEuB,UAAAA,GAAG,EAAE;AAAA;AAAA;AAAP,SAA3C;AACA,eAAO,CAACP,EAAD,EAAKhB,QAAL,CAAP;AACD,OANqB,CAAtB;AAQAW,MAAAA,GAAG,6BAAsB,MAAKG,GAA3B,GAAkC,YAAM;AACzCpB,QAAAA,eAAe,CAACU,SAAS,CAAC,MAAKU,GAAN,CAAV,CAAf;AACD,OAFE,CAAH;AAIA;AACD;AAED;;;;;;;AAnCF;AAAA;AAAA,+BAwCW;AACPpB,QAAAA,eAAe,CAACU,SAAS,CAAC,KAAKU,GAAN,CAAV,CAAf;AACA;AACD;AA3CH;AAAA;AAAA,IAAuCT,SAAvC;AA6CD,C","sourcesContent":["import useResize from '../services/resize';\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {Base}           instance The component's instance.\n * @return {String|Boolean}          The action to call ($mount|$destroy) or false.\n */\nfunction testBreakpoints(breakpoints) {\n  const { breakpoint } = useResize().props();\n  breakpoints.forEach(([breakpointKeys, instance]) => {\n    if (breakpointKeys.includes(breakpoint)) {\n      instance.$mount();\n    } else {\n      instance.$destroy();\n    }\n  });\n}\n\n/**\n * A cache object to hold each Base sub-instances.\n * @type {Object}\n */\nconst instances = {};\n\n/**\n * BreakpointManager class.\n */\nexport default (BaseClass, breakpoints = []) => {\n  if (!Array.isArray(breakpoints)) {\n    throw new Error('[withBreakpointManager] The `breakpoints` parameter must be an array.');\n  }\n\n  if (breakpoints.length < 2) {\n    throw new Error('[withBreakpointManager] You must define at least 2 breakpoints.');\n  }\n\n  return class BreakpointManager extends BaseClass {\n    /**\n     * Watch for the document resize to test the breakpoints.\n     * @param  {HTMLElement} element The component's root element.\n     * @return {BreakpointManager}          The current instance.\n     */\n    constructor(element) {\n      super(element);\n\n      const { add, props } = useResize();\n      const { name } = this.$options;\n\n      // Do nothing if no breakpoint has been defined.\n      // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n      if (!props().breakpoint) {\n        throw new Error(\n          `[${name}] The \\`BreakpointManager\\` class requires breakpoints to be defined.`\n        );\n      }\n\n      instances[this.$id] = breakpoints.map(([bk, ComponentClass]) => {\n        // eslint-disable-next-line no-underscore-dangle\n        ComponentClass.prototype.__isChild__ = true;\n        const instance = new ComponentClass(this.$el);\n        Object.defineProperty(instance, '$parent', { get: () => this });\n        return [bk, instance];\n      });\n\n      add(`BreakpointManager-${this.$id}`, () => {\n        testBreakpoints(instances[this.$id]);\n      });\n\n      return this;\n    }\n\n    /**\n     * Override the default $mount method to prevent component's from being\n     * mounted when they should not.\n     * @return {BreakpointManager} The component's instance.\n     */\n    $mount() {\n      testBreakpoints(instances[this.$id]);\n      return super.$mount();\n    }\n  };\n};\n"],"file":"withBreakpointManager.js"}