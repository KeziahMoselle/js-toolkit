{"version":3,"sources":["../../src/decorators/withIntersectionObserver.js"],"names":["debug","createArrayOfNumber","length","Array","map","val","index","BaseClass","defaultOptions","threshold","element","intersected","Error","$observer","IntersectionObserver","entries","$emit","$options","intersectionObserver","$isMounted","observe","$el","$on","unobserve","config","name","options","Object"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,yBAAtB;;AAwBA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACnC,SAAO,mBAAI,IAAIC,KAAJ,CAAUD,MAAM,GAAG,CAAnB,CAAJ,EAA2BE,GAA3B,CAA+B,UAACC,GAAD,EAAMC,KAAN;AAAA,WAAgBA,KAAK,GAAGJ,MAAxB;AAAA,GAA/B,CAAP;AACD;;AAQD,gBAAe,UAACK,SAAD;AAAA;;AAAA,MAAYC,cAAZ,uEAA6B;AAAEC,IAAAA,SAAS,EAAER,mBAAmB,CAAC,GAAD;AAAhC,GAA7B;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,0BAKgB;AACzB,4CAAY,yEAA8B,EAA1C,IAA+C,aAA/C;AACD;AAPU;;AAwBX,oBAAYS,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,gCAAMA,OAAN;;AAEA,UAAI,CAAC,MAAKC,WAAN,IAAqB,OAAO,MAAKA,WAAZ,KAA4B,UAArD,EAAiE;AAC/D,cAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAED,YAAKC,SAAL,GAAiB,IAAIC,oBAAJ,CACf,UAACC,OAAD,EAAa;AACXf,QAAAA,KAAK,gCAAO,aAAP,EAAsBe,OAAtB,CAAL;;AACA,cAAKC,KAAL,CAAW,aAAX,EAA0BD,OAA1B;;AACA,cAAKJ,WAAL,CAAiBI,OAAjB;AACD,OALc,kCAMVP,cANU,GAMU,MAAKS,QAAL,CAAcC,oBAAd,IAAsC,EANhD,EAAjB;;AASA,UAAI,MAAKC,UAAT,EAAqB;AACnB,cAAKN,SAAL,CAAeO,OAAf,CAAuB,MAAKC,GAA5B;AACD;;AAED,YAAKC,GAAL,CAAS,SAAT,EAAoB,YAAM;AACxB,cAAKT,SAAL,CAAeO,OAAf,CAAuB,MAAKC,GAA5B;AACD,OAFD;;AAIA,YAAKC,GAAL,CAAS,WAAT,EAAsB,YAAM;AAC1B,cAAKT,SAAL,CAAeU,SAAf,CAAyB,MAAKF,GAA9B;AACD,OAFD;;AAIA;AACD;;AArDU;AAAA,IACCd,SADD,qEAULA,SAAS,CAACiB,MAAV,IAAoB,EAVf;AAWTC,IAAAA,IAAI,qCAAKlB,SAAL,aAAKA,SAAL,4CAAKA,SAAS,CAAEiB,MAAhB,sDAAK,kBAAmBC,IAAxB,yEAAgC,EAAhC,6BAXK;AAYTC,IAAAA,OAAO,kCACD,CAAAnB,SAAS,SAAT,IAAAA,SAAS,WAAT,kCAAAA,SAAS,CAAEiB,MAAX,0EAAmBE,OAAnB,KAA8B,EAD7B;AAELR,MAAAA,oBAAoB,EAAES;AAFjB;AAZE;AAAA,CAAf","sourcesContent":["import { debug } from '../abstracts/Base/utils';\n\n/**\n * @typedef {import('../abstracts/Base').default} Base\n * @typedef {import('../abstracts/Base').BaseComponent} BaseComponent\n */\n\n/**\n * @typedef {Object} WithIntersectionObserverOptions\n * @property {Object} intersectionObserver\n */\n\n/**\n * @typedef {Object} WithIntersectionObserverInterface\n * @property {WithIntersectionObserverOptions} $options\n * @property {IntersectionObserver} $observer\n * @property {(entries: IntersectionObserverEntry[]) => void} intersected\n */\n\n/**\n * Create an array of number between 0 and 1 from the given length.\n * @param  {Number} length The length of the array.\n * @return {Array}        An array of number.\n */\nfunction createArrayOfNumber(length) {\n  return [...new Array(length + 1)].map((val, index) => index / length);\n}\n\n/**\n * IntersectionObserver decoration.\n * @param {BaseComponent} BaseClass The Base class to extend.\n * @param {Object} [defaultOptions] The options for the IntersectionObserver instance.\n * @return {BaseComponent}\n */\nexport default (BaseClass, defaultOptions = { threshold: createArrayOfNumber(100) }) =>\n  class extends BaseClass {\n    /**\n     * Add the `intersected` method to the list of method to exclude from the `autoBind` call.\n     */\n    get _excludeFromAutoBind() {\n      return [...(super._excludeFromAutoBind || []), 'intersected'];\n    }\n\n    static config = {\n      ...(BaseClass.config || {}),\n      name: `${BaseClass?.config?.name ?? ''}WithIntersectionObserver`,\n      options: {\n        ...(BaseClass?.config?.options || {}),\n        intersectionObserver: Object,\n      },\n    };\n\n    /**\n     * Create an observer when the class in instantiated.\n     *\n     * @this {Base & WithIntersectionObserverInterface}\n     * @param  {HTMLElement} element The component's root element.\n     */\n    constructor(element) {\n      super(element);\n\n      if (!this.intersected || typeof this.intersected !== 'function') {\n        throw new Error('[withIntersectionObserver] The `intersected` method must be defined.');\n      }\n\n      this.$observer = new IntersectionObserver(\n        (entries) => {\n          debug(this, 'intersected', entries);\n          this.$emit('intersected', entries);\n          this.intersected(entries);\n        },\n        { ...defaultOptions, ...(this.$options.intersectionObserver || {}) }\n      );\n\n      if (this.$isMounted) {\n        this.$observer.observe(this.$el);\n      }\n\n      this.$on('mounted', () => {\n        this.$observer.observe(this.$el);\n      });\n\n      this.$on('destroyed', () => {\n        this.$observer.unobserve(this.$el);\n      });\n\n      return this;\n    }\n  };\n"],"file":"withIntersectionObserver.js"}