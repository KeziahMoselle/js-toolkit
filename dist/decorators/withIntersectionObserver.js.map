{"version":3,"sources":["../../src/decorators/withIntersectionObserver.js"],"names":["createArrayOfNumber","length","Array","map","val","index","BaseClass","defaultOptions","threshold","element","intersected","observer","IntersectionObserver","entries","$options","intersectionObserver","$on","observe","$el","unobserve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAEA;;;;;AAKA,SAASA,mBAAT,GAA0C;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACxC,SAAO,iCAAI,IAAIC,KAAJ,CAAUD,MAAV,CAAJ,EAAuBE,GAAvB,CAA2B,UAACC,GAAD,EAAMC,KAAN;AAAA,WAAgBA,KAAK,GAAGJ,MAAxB;AAAA,GAA3B,CAAP;AACD;AAED;;;;;eAGe,kBAACK,SAAD;AAAA,MAAYC,cAAZ,uEAA6B;AAAEC,IAAAA,SAAS,EAAER,mBAAmB,CAAC,GAAD;AAAhC,GAA7B;AAAA;AAAA;;AAAA;;AAEX;;;;;;AAMA,oBAAYS,OAAZ,EAAqB;AAAA;;AAAA;AACnB,gCAAMA,OAAN;;AAEA,UAAI,CAAC,MAAKC,WAAN,IAAqB,OAAO,MAAKA,WAAZ,KAA4B,UAArD,EAAiE;AAC/D;AACD;;AAED,YAAKC,QAAL,GAAgB,IAAIC,oBAAJ,CACd,UAAAC,OAAO,EAAI;AACT,YAAI,OAAO,MAAKH,WAAZ,KAA4B,UAAhC,EAA4C;AAC1C,yEAAY,aAAZ,EAA2BG,OAA3B;;AACA,gBAAKH,WAAL,CAAiBG,OAAjB;AACD;AACF,OANa,kCAOTN,cAPS,GAOW,MAAKO,QAAL,CAAcC,oBAAd,IAAsC,EAPjD,EAAhB;;AAUA,YAAKC,GAAL,CAAS,SAAT,EAAoB,YAAM;AACxB,cAAKL,QAAL,CAAcM,OAAd,CAAsB,MAAKC,GAA3B;AACD,OAFD;;AAIA,YAAKF,GAAL,CAAS,WAAT,EAAsB,YAAM;AAC1B,cAAKL,QAAL,CAAcQ,SAAd,CAAwB,MAAKD,GAA7B;AACD,OAFD;;AAIA;AACD;;AAlCU;AAAA,IACCZ,SADD;AAAA,C","sourcesContent":["import { debug } from '../abstracts/Base/utils';\n\n/**\n * Create an array of number between 0 and 1 from the given length.\n * @param  {Number} length The length of the array.\n * @return {Array}        An array of number.\n */\nfunction createArrayOfNumber(length = 10) {\n  return [...new Array(length)].map((val, index) => index / length);\n}\n\n/**\n * IntersectionObserver decoration.\n */\nexport default (BaseClass, defaultOptions = { threshold: createArrayOfNumber(100) }) =>\n  class extends BaseClass {\n    /**\n     * Create an observer when the class in instantiated.\n     *\n     * @param  {HTMLElement} element The component's root element.\n     * @return {Base}                The class instace.\n     */\n    constructor(element) {\n      super(element);\n\n      if (!this.intersected || typeof this.intersected !== 'function') {\n        return this;\n      }\n\n      this.observer = new IntersectionObserver(\n        entries => {\n          if (typeof this.intersected === 'function') {\n            debug(this, 'intersected', entries);\n            this.intersected(entries);\n          }\n        },\n        { ...defaultOptions, ...(this.$options.intersectionObserver || {}) }\n      );\n\n      this.$on('mounted', () => {\n        this.observer.observe(this.$el);\n      });\n\n      this.$on('destroyed', () => {\n        this.observer.unobserve(this.$el);\n      });\n\n      return this;\n    }\n  };\n"],"file":"withIntersectionObserver.js"}