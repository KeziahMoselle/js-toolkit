{"version":3,"sources":["../../../src/components/Accordion/index.js"],"names":["Base","AccordionItem","Accordion","unbindMethods","$children","map","item","index","unbindOpen","$on","$emit","$options","autoclose","filter","el","i","forEach","it","close","unbindClose","unbind","name","options","Boolean","Object","components"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;IA6BqBC,S;;;;;;;;;;;;;;;;oEAkBH,E;;;;;;;;;;;;;;;AAed,qBAAKC,aAAL,GAAqB,KAAKC,SAAL,CAAeH,aAAf,CAA6BI,GAA7B,CAAiC,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACrE,sBAAMC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAAS,MAAT,EAAiB,YAAM;AACxC,oBAAA,MAAI,CAACC,KAAL,CAAW,MAAX,EAAmBJ,IAAnB,EAAyBC,KAAzB;;AACA,wBAAI,MAAI,CAACI,QAAL,CAAcC,SAAlB,EAA6B;AAE3B,sBAAA,MAAI,CAACR,SAAL,CAAeH,aAAf,CAA6BY,MAA7B,CAAoC,UAACC,EAAD,EAAKC,CAAL;AAAA,+BAAWR,KAAK,KAAKQ,CAArB;AAAA,uBAApC,EAA4DC,OAA5D,CAAoE,UAACC,EAAD;AAAA,+BAAQA,EAAE,CAACC,KAAH,EAAR;AAAA,uBAApE;AACD;AACF,mBANkB,CAAnB;AAOA,sBAAMC,WAAW,GAAGb,IAAI,CAACG,GAAL,CAAS,OAAT,EAAkB,YAAM;AAC1C,oBAAA,MAAI,CAACC,KAAL,CAAW,OAAX,EAAoBJ,IAApB,EAA0BC,KAA1B;AACD,mBAFmB,CAApB;AAIA,yBAAO,YAAM;AACXC,oBAAAA,UAAU;AACVW,oBAAAA,WAAW;AACZ,mBAHD;AAID,iBAhBoB,CAArB;;;;;;;;;;;;;;;;;;gCAuBU;AACV,WAAKhB,aAAL,CAAmBa,OAAnB,CAA2B,UAACI,MAAD;AAAA,eAAYA,MAAM,EAAlB;AAAA,OAA3B;AACD;;;;EA1DoCpB,I;;gBAAlBE,S,YAIH;AACdmB,EAAAA,IAAI,EAAE,WADQ;AAEdC,EAAAA,OAAO,EAAE;AACPV,IAAAA,SAAS,EAAEW,OADJ;AAEPjB,IAAAA,IAAI,EAAEkB;AAFC,GAFK;AAMdC,EAAAA,UAAU,EAAE;AACVxB,IAAAA,aAAa,EAAbA;AADU;AANE,C;;SAJGC,S","sourcesContent":["import Base from '../../abstracts/Base';\n// eslint-disable-next-line import/no-cycle\nimport AccordionItem from './AccordionItem';\n\n/**\n * @typedef {Object} AccordionRefs\n * @property {HTMLElement[]} btn\n * @property {HTMLElement[]} content\n */\n\n/**\n * @typedef {Object} AccordionOptions\n * @property {Boolean} autoclose\n * @property {Object} item\n */\n\n/**\n * @typedef {Object} AccordionChildren\n * @property {AccordionItem[]} AccordionItem\n */\n\n/**\n * @typedef {Object} AccordionInterface\n * @property {AccordionOptions} $options\n * @property {AccordionRefs} $refs\n * @property {AccordionChildren} $children\n */\n\n/**\n * Accordion class.\n */\nexport default class Accordion extends Base {\n  /**\n   * Accordion config.\n   */\n  static config = {\n    name: 'Accordion',\n    options: {\n      autoclose: Boolean,\n      item: Object,\n    },\n    components: {\n      AccordionItem,\n    },\n  };\n\n  /**\n   * @type {Array<Function>}\n   */\n  unbindMethods = [];\n\n  /**\n   * Init autoclose behavior on mounted.\n   * @this {Accordion & AccordionInterface}\n   * @return {Promise<void>}\n   */\n  async mounted() {\n    // /** @type {AccordionItem[]} */\n    // const items = await Promise.all(\n    //   this.$children.AccordionItem.map((item) =>\n    //     item instanceof Promise ? item : Promise.resolve(item)\n    //   )\n    // );\n\n    this.unbindMethods = this.$children.AccordionItem.map((item, index) => {\n      const unbindOpen = item.$on('open', () => {\n        this.$emit('open', item, index);\n        if (this.$options.autoclose) {\n          // @ts-ignore\n          this.$children.AccordionItem.filter((el, i) => index !== i).forEach((it) => it.close());\n        }\n      });\n      const unbindClose = item.$on('close', () => {\n        this.$emit('close', item, index);\n      });\n\n      return () => {\n        unbindOpen();\n        unbindClose();\n      };\n    });\n  }\n\n  /**\n   * Destroy autoclose behavior on destroyed.\n   * @return {void}\n   */\n  destroyed() {\n    this.unbindMethods.forEach((unbind) => unbind());\n  }\n}\n"],"file":"index.js"}