{"version":3,"sources":["../../../src/abstracts/Base/utils.js"],"names":["getConfig","instance","config","constructor","Error","name","console","warn","msg","log","debug","$options","args","hasMethod","obj","callMethod","method","$isMounted","$emit","call"],"mappings":"AAAA;;;;;AAKA;;;;;;AAMA,OAAO,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;AAClC;AACA,MAAMC,MAAM,GAAGD,QAAQ,CAACE,WAAT,CAAqBD,MAArB,IAA+BD,QAAQ,CAACC,MAAvD;;AAEA,MAAI,CAACA,MAAL,EAAa;AACX,UAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAI,CAACF,MAAM,CAACG,IAAZ,EAAkB;AAChB,UAAM,IAAID,KAAJ,CAAU,yCAAV,CAAN;AACD,GAViC,CAYlC;;;AACA,MAAIH,QAAQ,CAACC,MAAT,IAAmB,CAACD,QAAQ,CAACE,WAAT,CAAqBD,MAA7C,EAAqD;AACnDI,IAAAA,OAAO,CAACC,IAAR,YACML,MAAM,CAACG,IADb,QAEE,qFAFF;AAID;;AAED,SAAOH,MAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASK,IAAT,CAAcN,QAAd,EAAgC;AAAA;;AAAA,mBACpBD,SAAS,CAACC,QAAD,CADW;AAAA,MAC7BI,IAD6B,cAC7BA,IAD6B;;AAAA,oCAALG,GAAK;AAALA,IAAAA,GAAK;AAAA;;AAErC,cAAAF,OAAO,EAACC,IAAR,6BAAiBF,IAAjB,eAA6BG,GAA7B;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,GAAT,CAAaR,QAAb,EAA+B;AAAA;;AAAA,oBACnBD,SAAS,CAACC,QAAD,CADU;AAAA,MAC5BI,IAD4B,eAC5BA,IAD4B;;AAAA,qCAALG,GAAK;AAALA,IAAAA,GAAK;AAAA;;AAEpC,eAAAF,OAAO,EAACG,GAAR,8BAAgBJ,IAAhB,eAA4BG,GAA5B;AACD;AAED;;;;;;;AAMA,OAAO,SAASE,KAAT,CAAeT,QAAf,EAAkC;AACvC,MAAIA,QAAQ,CAACU,QAAT,CAAkBD,KAAtB,EAA6B;AAAA,uCADIE,IACJ;AADIA,MAAAA,IACJ;AAAA;;AAC3BH,IAAAA,GAAG,MAAH,UAAIR,QAAJ,SAAiBW,IAAjB;AACD;AACF;AAED;;;;;;;;AAOA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwBT,IAAxB,EAA8B;AACnC,SAAO,OAAOS,GAAG,CAACT,IAAD,CAAV,KAAqB,UAA5B;AACD;AAED;;;;;;;;AAOA,OAAO,SAASU,UAAT,CAAoBd,QAApB,EAA8Be,MAA9B,EAA+C;AAAA;;AAAA,qCAANJ,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACpDF,EAAAA,KAAK,MAAL,UAAMT,QAAN,EAAgB,YAAhB,EAA8Be,MAA9B,SAAyCJ,IAAzC,GADoD,CAGpD;AACA;;AACA,MACGI,MAAM,KAAK,WAAX,IAA0B,CAACf,QAAQ,CAACgB,UAArC,IACCD,MAAM,KAAK,SAAX,IAAwBf,QAAQ,CAACgB,UAFpC,EAGE;AACAP,IAAAA,KAAK,CAACT,QAAD,EAAW,KAAX,EAAkBe,MAAlB,EAA0B,qDAA1B,CAAL;AACA,WAAOf,QAAP;AACD;;AAEDA,EAAAA,QAAQ,CAACiB,KAAT,OAAAjB,QAAQ,GAAOe,MAAP,SAAkBJ,IAAlB,EAAR,CAboD,CAepD;;AACA,MAAI,CAACC,SAAS,CAACZ,QAAD,EAAWe,MAAX,CAAd,EAAkC;AAChC,WAAOf,QAAP;AACD;;AAED,sBAAAA,QAAQ,CAACe,MAAD,CAAR,EAAiBG,IAAjB,0BAAsBlB,QAAtB,SAAmCW,IAAnC;;AACAF,EAAAA,KAAK,MAAL,UAAMT,QAAN,EAAgBe,MAAhB,EAAwBf,QAAxB,SAAqCW,IAArC;AAEA,SAAOX,QAAP;AACD","sourcesContent":["/**\n * @typedef {import('./index').default} Base\n * @typedef {import('./index').BaseConfig} BaseConfig\n */\n\n/**\n * Get the config from a Base instance, either the new static one or the old getter one.\n *\n * @param  {Base}       instance The instance to get the config from.\n * @return {BaseConfig}         A Base class configuration object.\n */\nexport function getConfig(instance) {\n  // @ts-ignore\n  const config = instance.constructor.config || instance.config;\n\n  if (!config) {\n    throw new Error('The `config` property must be defined.');\n  }\n\n  if (!config.name) {\n    throw new Error('The `config.name` property is required.');\n  }\n\n  // @ts-ignore\n  if (instance.config && !instance.constructor.config) {\n    console.warn(\n      `[${config.name}]`,\n      'Defining the `config` as a getter is deprecated, replace it with a static property.'\n    );\n  }\n\n  return config;\n}\n\n/**\n * Display a console warning for the given instance.\n *\n * @param {Base}      instance A Base instance.\n * @param {...String} msg   Values to display in the console.\n */\nexport function warn(instance, ...msg) {\n  const { name } = getConfig(instance);\n  console.warn(`[${name}]`, ...msg);\n}\n\n/**\n * Display a console log for the given instance.\n *\n * @param {Base}   instance The instance to log information from.\n * @param {...any} msg      The data to print to the console.\n */\nexport function log(instance, ...msg) {\n  const { name } = getConfig(instance);\n  console.log(`[${name}]`, ...msg);\n}\n\n/**\n * Verbose debug for the component.\n *\n * @param {Base}   instance The instance to debug.\n * @param {...any} args     The data to print.\n */\nexport function debug(instance, ...args) {\n  if (instance.$options.debug) {\n    log(instance, ...args);\n  }\n}\n\n/**\n * Test if an object has a method.\n *\n * @param  {Object}  obj  The object to test\n * @param  {String}  name The method's name\n * @return {Boolean}\n */\nexport function hasMethod(obj, name) {\n  return typeof obj[name] === 'function';\n}\n\n/**\n * Call the given method while applying the given arguments.\n *\n * @param {Base}   instance The Base instance on which to trigger the method.\n * @param {String} method   The method to call.\n * @param {...any} args     The arguments to pass to the method.\n */\nexport function callMethod(instance, method, ...args) {\n  debug(instance, 'callMethod', method, ...args);\n\n  // Prevent duplicate call of `mounted` and `destroyed`\n  // methods based on the component status\n  if (\n    (method === 'destroyed' && !instance.$isMounted) ||\n    (method === 'mounted' && instance.$isMounted)\n  ) {\n    debug(instance, 'not', method, 'because the method has already been triggered once.');\n    return instance;\n  }\n\n  instance.$emit(method, ...args);\n\n  // We always emit an event, but we do not call the method if it does not exist\n  if (!hasMethod(instance, method)) {\n    return instance;\n  }\n\n  instance[method].call(instance, ...args);\n  debug(instance, method, instance, ...args);\n\n  return instance;\n}\n"],"file":"utils.js"}