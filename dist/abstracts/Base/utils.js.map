{"version":3,"sources":["../../../src/abstracts/Base/utils.js"],"names":["debug","instance","args","$options","window","console","log","apply","config","name","hasMethod","obj","callMethod","method","$isMounted","$emit","call"],"mappings":"AAAA;;;;;;AAMA,OAAO,SAASA,KAAT,CAAeC,QAAf,EAAkC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACvC,SAAOD,QAAQ,CAACE,QAAT,CAAkBH,KAAlB,GACHI,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBC,KAAnB,CAAyBH,MAAzB,GAAkCH,QAAQ,CAACO,MAAT,CAAgBC,IAAlD,SAA2DP,IAA3D,EADG,GAEH,YAAM,CAAE,CAFZ;AAGD;AAED;;;;;;;;AAOA,OAAO,SAASQ,SAAT,CAAmBC,GAAnB,EAAwBF,IAAxB,EAA8B;AACnC,SAAO,OAAOE,GAAG,CAACF,IAAD,CAAV,KAAqB,UAA5B;AACD;AAED;;;;;;;AAMA,OAAO,SAASG,UAAT,CAAoBX,QAApB,EAA8BY,MAA9B,EAA+C;AAAA;;AAAA,qCAANX,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACpDF,EAAAA,KAAK,MAAL,UAAMC,QAAN,EAAgB,YAAhB,EAA8BY,MAA9B,SAAyCX,IAAzC,GADoD,CAGpD;AACA;;AACA,MACGW,MAAM,KAAK,WAAX,IAA0B,CAACZ,QAAQ,CAACa,UAArC,IACCD,MAAM,KAAK,SAAX,IAAwBZ,QAAQ,CAACa,UAFpC,EAGE;AACAd,IAAAA,KAAK,CAACC,QAAD,EAAW,KAAX,EAAkBY,MAAlB,EAA0B,qDAA1B,CAAL;AACA,WAAOZ,QAAP;AACD;;AAEDA,EAAAA,QAAQ,CAACc,KAAT,OAAAd,QAAQ,GAAOY,MAAP,SAAkBX,IAAlB,EAAR,CAboD,CAepD;;AACA,MAAI,CAACQ,SAAS,CAACT,QAAD,EAAWY,MAAX,CAAd,EAAkC;AAChC,WAAOZ,QAAP;AACD;;AAED,sBAAAA,QAAQ,CAACY,MAAD,CAAR,EAAiBG,IAAjB,0BAAsBf,QAAtB,SAAmCC,IAAnC;;AACAF,EAAAA,KAAK,MAAL,UAAMC,QAAN,EAAgBY,MAAhB,EAAwBZ,QAAxB,SAAqCC,IAArC;AAEA,SAAOD,QAAP;AACD","sourcesContent":["/**\n * Verbose debug for the component.\n *\n * @param  {...any} args The arguments passed to the method\n * @return {void}\n */\nexport function debug(instance, ...args) {\n  return instance.$options.debug\n    ? window.console.log.apply(window, [instance.config.name, ...args])\n    : () => {};\n}\n\n/**\n * Test if an object has a method.\n *\n * @param  {Object}  obj The object to test\n * @param  {String}  fn  The method's name\n * @return {Boolean}\n */\nexport function hasMethod(obj, name) {\n  return typeof obj[name] === 'function';\n}\n\n/**\n * Call the given method while applying the given arguments.\n *\n * @param {String} method The method to call\n * @param {...any} args   The arguments to pass to the method\n */\nexport function callMethod(instance, method, ...args) {\n  debug(instance, 'callMethod', method, ...args);\n\n  // Prevent duplicate call of `mounted` and `destroyed`\n  // methods based on the component status\n  if (\n    (method === 'destroyed' && !instance.$isMounted) ||\n    (method === 'mounted' && instance.$isMounted)\n  ) {\n    debug(instance, 'not', method, 'because the method has already been triggered once.');\n    return instance;\n  }\n\n  instance.$emit(method, ...args);\n\n  // We always emit an event, but we do not call the method if it does not exist\n  if (!hasMethod(instance, method)) {\n    return instance;\n  }\n\n  instance[method].call(instance, ...args);\n  debug(instance, method, instance, ...args);\n\n  return instance;\n}\n"],"file":"utils.js"}