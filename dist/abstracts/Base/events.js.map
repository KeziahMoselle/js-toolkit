{"version":3,"sources":["../../../src/abstracts/Base/events.js"],"names":["bindRootEvents","instance","eventMethods","map","eventMethod","eventName","replace","toLowerCase","handler","args","debug","$el","addEventListener","removeEventListener","bindRefsEvents","unbindMethods","Object","entries","$refs","forEach","refName","$refOrRefs","Array","isArray","refEventMethod","c","toUpperCase","filter","startsWith","$ref","index","constructor","__isBase__","unbindMethod","push","bindChildrenEvents","$children","childName","childEventMethod","$child","$on","bindEvents","ROOT_EVENT_REGEX","REFS_CHILDREN_EVENT_REGEX","reduce","acc","name","test","root","refsOrChildren"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;AAOA,SAASA,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgD;AAC9C,SAAOA,YAAY,CAACC,GAAb,CAAiB,UAAAC,WAAW,EAAI;AACrC,QAAMC,SAAS,GAAGD,WAAW,CAACE,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,EAA+BC,WAA/B,EAAlB;;AAEA,QAAMC,OAAO,GAAG,SAAVA,OAAU,GAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAC3BC,kCAAMT,QAAN,EAAgBG,WAAhB,EAA6BH,QAAQ,CAACU,GAAtC,SAA8CF,IAA9C;;AACAR,MAAAA,QAAQ,CAACG,WAAD,CAAR,OAAAH,QAAQ,EAAiBQ,IAAjB,CAAR;AACD,KAHD;;AAKAR,IAAAA,QAAQ,CAACU,GAAT,CAAaC,gBAAb,CAA8BP,SAA9B,EAAyCG,OAAzC;AAEA,WAAO,YAAM;AACXP,MAAAA,QAAQ,CAACU,GAAT,CAAaE,mBAAb,CAAiCR,SAAjC,EAA4CG,OAA5C;AACD,KAFD;AAGD,GAbM,CAAP;AAcD;AAED;;;;;;;;;AAOA,SAASM,cAAT,CAAwBb,QAAxB,EAAkCC,YAAlC,EAAgD;AAC9C,MAAMa,aAAa,GAAG,EAAtB;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAehB,QAAQ,CAACiB,KAAxB,EAA+BC,OAA/B,CAAuC,gBAA2B;AAAA;AAAA,QAAzBC,OAAyB;AAAA,QAAhBC,UAAgB;;AAChE,QAAMH,KAAK,GAAGI,KAAK,CAACC,OAAN,CAAcF,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD;AACA,QAAMG,cAAc,eAAQJ,OAAO,CAACd,OAAR,CAAgB,KAAhB,EAAuB,UAAAmB,CAAC;AAAA,aAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,KAAxB,CAAR,CAApB;AAEAxB,IAAAA,YAAY,CACTyB,MADH,CACU,UAAAvB,WAAW;AAAA,aAAIA,WAAW,CAACwB,UAAZ,CAAuBJ,cAAvB,CAAJ;AAAA,KADrB,EAEGL,OAFH,CAEW,UAAAf,WAAW,EAAI;AACtBc,MAAAA,KAAK,CAACC,OAAN,CAAc,UAACU,IAAD,EAAOC,KAAP,EAAiB;AAC7B,YAAMzB,SAAS,GAAGD,WAAW,CAACE,OAAZ,CAAoBkB,cAApB,EAAoC,EAApC,EAAwCjB,WAAxC,EAAlB;;AACA,YAAMC,OAAO,GAAG,SAAVA,OAAU,GAAa;AAAA,6CAATC,IAAS;AAATA,YAAAA,IAAS;AAAA;;AAC3BC,sCAAMT,QAAN,EAAgBG,WAAhB,EAA6ByB,IAA7B,SAAsCpB,IAAtC,GAA4CqB,KAA5C;;AACA7B,UAAAA,QAAQ,CAACG,WAAD,CAAR,OAAAH,QAAQ,EAAiBQ,IAAjB,SAAuBqB,KAAvB,GAAR;AACD,SAHD;;AAKA,0BAAM7B,QAAN,EAAgB,mBAAhB,EAAqCmB,OAArC,EAA8Cf,SAA9C;;AAEA,YAAIwB,IAAI,CAACE,WAAL,IAAoBF,IAAI,CAACE,WAAL,CAAiBC,UAAzC,EAAqD;AACnD;AACAH,UAAAA,IAAI,GAAGA,IAAI,CAAClB,GAAZ;AACD;;AAEDkB,QAAAA,IAAI,CAACjB,gBAAL,CAAsBP,SAAtB,EAAiCG,OAAjC;;AACA,YAAMyB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,4BAAMhC,QAAN,EAAgB,qBAAhB,EAAuCC,YAAvC;AACA2B,UAAAA,IAAI,CAAChB,mBAAL,CAAyBR,SAAzB,EAAoCG,OAApC;AACD,SAHD;;AAKAO,QAAAA,aAAa,CAACmB,IAAd,CAAmBD,YAAnB;AACD,OArBD;AAsBD,KAzBH;AA0BD,GA9BD;AAgCA,SAAOlB,aAAP;AACD;AAED;;;;;;;;AAMA,SAASoB,kBAAT,CAA4BlC,QAA5B,EAAsCC,YAAtC,EAAoD;AAClD,MAAMa,aAAa,GAAG,EAAtB;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAehB,QAAQ,CAACmC,SAAxB,EAAmCjB,OAAnC,CAA2C,iBAA4B;AAAA;AAAA,QAA1BkB,SAA0B;AAAA,QAAfD,SAAe;;AACrE,QAAME,gBAAgB,eAAQD,SAAS,CAAC/B,OAAV,CAAkB,KAAlB,EAAyB,UAAAmB,CAAC;AAAA,aAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,KAA1B,CAAR,CAAtB;AAEAxB,IAAAA,YAAY,CACTyB,MADH,CACU,UAAAvB,WAAW;AAAA,aAAIA,WAAW,CAACwB,UAAZ,CAAuBU,gBAAvB,CAAJ;AAAA,KADrB,EAEGnB,OAFH,CAEW,UAAAf,WAAW,EAAI;AACtBgC,MAAAA,SAAS,CAACjB,OAAV,CAAkB,UAACoB,MAAD,EAAST,KAAT,EAAmB;AACnC,YAAMzB,SAAS,GAAGD,WAAW,CAACE,OAAZ,CAAoBgC,gBAApB,EAAsC,EAAtC,EAA0C/B,WAA1C,EAAlB;;AACA,YAAMC,OAAO,GAAG,SAAVA,OAAU,GAAa;AAAA,6CAATC,IAAS;AAATA,YAAAA,IAAS;AAAA;;AAC3BC,sCAAMT,QAAN,EAAgBG,WAAhB,EAA6BmC,MAA7B,SAAwC9B,IAAxC,GAA8CqB,KAA9C;;AACA7B,UAAAA,QAAQ,CAACG,WAAD,CAAR,OAAAH,QAAQ,EAAiBQ,IAAjB,SAAuBqB,KAAvB,GAAR;AACD,SAHD;;AAKA,0BAAM7B,QAAN,EAAgB,qBAAhB,EAAuCoC,SAAvC,EAAkDhC,SAAlD;AAEA,YAAM4B,YAAY,GAAGM,MAAM,CAACC,GAAP,CAAWnC,SAAX,EAAsBG,OAAtB,CAArB;AACAO,QAAAA,aAAa,CAACmB,IAAd,CAAmB,YAAM;AACvB,4BAAMjC,QAAN,EAAgB,uBAAhB,EAAyCoC,SAAzC,EAAoDhC,SAApD;AACA4B,UAAAA,YAAY;AACb,SAHD;AAID,OAdD;AAeD,KAlBH;AAmBD,GAtBD;AAwBA,SAAOlB,aAAP;AACD;AAED;;;;;;;;AAMe,SAAS0B,UAAT,CAAoBxC,QAApB,EAA8B;AAC3C,MAAMyC,gBAAgB,GAAG,iBAAzB;AACA,MAAMC,yBAAyB,GAAG,iCAAlC,CAF2C,CAI3C;;AACA,MAAMzC,YAAY,GAAG,+BAAiBD,QAAjB,EAA2B2C,MAA3B,CACnB,UAACC,GAAD,SAAiB;AAAA;AAAA,QAAVC,IAAU;;AACf;AACA,QAAIJ,gBAAgB,CAACK,IAAjB,CAAsBD,IAAtB,CAAJ,EAAiC;AAC/BD,MAAAA,GAAG,CAACG,IAAJ,CAASd,IAAT,CAAcY,IAAd;AACA,aAAOD,GAAP;AACD,KALc,CAOf;;;AACA,QAAIF,yBAAyB,CAACI,IAA1B,CAA+BD,IAA/B,CAAJ,EAA0C;AACxCD,MAAAA,GAAG,CAACI,cAAJ,CAAmBf,IAAnB,CAAwBY,IAAxB;AACD;;AAED,WAAOD,GAAP;AACD,GAdkB,EAenB;AAAEG,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,cAAc,EAAE;AAA5B,GAfmB,CAArB;AAkBA,MAAMlC,aAAa,8CACdf,cAAc,CAACC,QAAD,EAAWC,YAAY,CAAC8C,IAAxB,CADA,oCAEdlC,cAAc,CAACb,QAAD,EAAWC,YAAY,CAAC+C,cAAxB,CAFA,oCAGdd,kBAAkB,CAAClC,QAAD,EAAWC,YAAY,CAAC+C,cAAxB,CAHJ,EAAnB;AAMA,SAAOlC,aAAP;AACD","sourcesContent":["import getAllProperties from '../../utils/object/getAllProperties';\nimport { debug } from './utils';\n\n/**\n * Bind event handler methods to the root HTML element.\n *\n * @param  {Base}  instance     A Base instance.\n * @param  {Array} eventMethods A list of methods to bind.\n * @return {Array}              A list of unbind functions.\n */\nfunction bindRootEvents(instance, eventMethods) {\n  return eventMethods.map(eventMethod => {\n    const eventName = eventMethod.replace(/^on/, '').toLowerCase();\n\n    const handler = (...args) => {\n      debug(instance, eventMethod, instance.$el, ...args);\n      instance[eventMethod](...args);\n    };\n\n    instance.$el.addEventListener(eventName, handler);\n\n    return () => {\n      instance.$el.removeEventListener(eventName, handler);\n    };\n  });\n}\n\n/**\n * Bind event handler methods to refs HTML element.\n *\n * @param  {Base}  instance     A Base instance.\n * @param  {Array} eventMethods A list of methods to bind.\n * @return {Array}              A list of unbind functions.\n */\nfunction bindRefsEvents(instance, eventMethods) {\n  const unbindMethods = [];\n\n  Object.entries(instance.$refs).forEach(([refName, $refOrRefs]) => {\n    const $refs = Array.isArray($refOrRefs) ? $refOrRefs : [$refOrRefs];\n    const refEventMethod = `on${refName.replace(/^\\w/, c => c.toUpperCase())}`;\n\n    eventMethods\n      .filter(eventMethod => eventMethod.startsWith(refEventMethod))\n      .forEach(eventMethod => {\n        $refs.forEach(($ref, index) => {\n          const eventName = eventMethod.replace(refEventMethod, '').toLowerCase();\n          const handler = (...args) => {\n            debug(instance, eventMethod, $ref, ...args, index);\n            instance[eventMethod](...args, index);\n          };\n\n          debug(instance, 'binding ref event', refName, eventName);\n\n          if ($ref.constructor && $ref.constructor.__isBase__) {\n            // eslint-disable-next-line no-param-reassign\n            $ref = $ref.$el;\n          }\n\n          $ref.addEventListener(eventName, handler);\n          const unbindMethod = () => {\n            debug(instance, 'unbinding ref event', eventMethods);\n            $ref.removeEventListener(eventName, handler);\n          };\n\n          unbindMethods.push(unbindMethod);\n        });\n      });\n  });\n\n  return unbindMethods;\n}\n\n/**\n * Bind event handler methods to children Base instance.\n * @param  {Base}  instance     A Base instance.\n * @param  {Array} eventMethods A list of methods to bind.\n * @return {Array}              A list of unbind functions.\n */\nfunction bindChildrenEvents(instance, eventMethods) {\n  const unbindMethods = [];\n\n  Object.entries(instance.$children).forEach(([childName, $children]) => {\n    const childEventMethod = `on${childName.replace(/^\\w/, c => c.toUpperCase())}`;\n\n    eventMethods\n      .filter(eventMethod => eventMethod.startsWith(childEventMethod))\n      .forEach(eventMethod => {\n        $children.forEach(($child, index) => {\n          const eventName = eventMethod.replace(childEventMethod, '').toLowerCase();\n          const handler = (...args) => {\n            debug(instance, eventMethod, $child, ...args, index);\n            instance[eventMethod](...args, index);\n          };\n\n          debug(instance, 'binding child event', childName, eventName);\n\n          const unbindMethod = $child.$on(eventName, handler);\n          unbindMethods.push(() => {\n            debug(instance, 'unbinding child event', childName, eventName);\n            unbindMethod();\n          });\n        });\n      });\n  });\n\n  return unbindMethods;\n}\n\n/**\n * Bind ref and children component's events to their corresponding method.\n *\n * @param  {Base} instance  A Base instance.\n * @return {Array}          A list of methods to unbind the events.\n */\nexport default function bindEvents(instance) {\n  const ROOT_EVENT_REGEX = /^on[A-Z][a-z]+$/;\n  const REFS_CHILDREN_EVENT_REGEX = /^on([A-Z][a-z]+)([A-Z][a-z]+)+$/;\n\n  // Get all event methods\n  const eventMethods = getAllProperties(instance).reduce(\n    (acc, [name]) => {\n      // Testing camelCase with one word: onEvent.\n      if (ROOT_EVENT_REGEX.test(name)) {\n        acc.root.push(name);\n        return acc;\n      }\n\n      // Testing camelCase with more than two words: onRefEvent.\n      if (REFS_CHILDREN_EVENT_REGEX.test(name)) {\n        acc.refsOrChildren.push(name);\n      }\n\n      return acc;\n    },\n    { root: [], refsOrChildren: [] }\n  );\n\n  const unbindMethods = [\n    ...bindRootEvents(instance, eventMethods.root),\n    ...bindRefsEvents(instance, eventMethods.refsOrChildren),\n    ...bindChildrenEvents(instance, eventMethods.refsOrChildren),\n  ];\n\n  return unbindMethods;\n}\n"],"file":"events.js"}