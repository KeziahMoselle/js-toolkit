{"version":3,"sources":["../../../src/abstracts/Base/events.js"],"names":["bindEvents","instance","unbindMethods","eventMethods","filter","name","startsWith","Object","entries","$refs","forEach","refName","$refOrRefs","Array","isArray","refEventMethod","replace","c","toUpperCase","eventMethod","$ref","index","eventName","toLowerCase","handler","event","addEventListener","push","removeEventListener","$el"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;AAMe,SAASA,UAAT,CAAoBC,QAApB,EAA8B;AAC3C,MAAMC,aAAa,GAAG,EAAtB,CAD2C,CAE3C;;AACA,MAAIC,YAAY,GAAG,+BAAiBF,QAAjB,EAA2BG,MAA3B,CAAkC;AAAA;AAAA,QAAEC,IAAF;;AAAA,WAAYA,IAAI,CAACC,UAAL,CAAgB,IAAhB,CAAZ;AAAA,GAAlC,CAAnB;AAEAC,EAAAA,MAAM,CAACC,OAAP,CAAeP,QAAQ,CAACQ,KAAxB,EAA+BC,OAA/B,CAAuC,iBAA2B;AAAA;AAAA,QAAzBC,OAAyB;AAAA,QAAhBC,UAAgB;;AAChE,QAAMH,KAAK,GAAGI,KAAK,CAACC,OAAN,CAAcF,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD;AACA,QAAMG,cAAc,eAAQJ,OAAO,CAACK,OAAR,CAAgB,KAAhB,EAAuB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,KAAxB,CAAR,CAApB;AAEAf,IAAAA,YAAY,CACTC,MADH,CACU;AAAA;AAAA,UAAEe,WAAF;;AAAA,aAAmBA,WAAW,CAACb,UAAZ,CAAuBS,cAAvB,CAAnB;AAAA,KADV,EAEGL,OAFH,CAEW,iBAAmB;AAAA;AAAA,UAAjBS,WAAiB;;AAC1BV,MAAAA,KAAK,CAACC,OAAN,CAAc,UAACU,IAAD,EAAOC,KAAP,EAAiB;AAC7B,YAAMC,SAAS,GAAGH,WAAW,CAACH,OAAZ,CAAoBD,cAApB,EAAoC,EAApC,EAAwCQ,WAAxC,EAAlB;;AACA,YAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,4BAAMxB,QAAN,EAAgBkB,WAAhB,EAA6BC,IAA7B,EAAmCK,KAAnC,EAA0CJ,KAA1C;AACApB,UAAAA,QAAQ,CAACkB,WAAD,CAAR,CAAsBM,KAAtB,EAA6BJ,KAA7B;AACD,SAHD;;AAIAD,QAAAA,IAAI,CAACM,gBAAL,CAAsBJ,SAAtB,EAAiCE,OAAjC;AAEAtB,QAAAA,aAAa,CAACyB,IAAd,CAAmB,YAAM;AACvBP,UAAAA,IAAI,CAACQ,mBAAL,CAAyBN,SAAzB,EAAoCE,OAApC;AACD,SAFD;AAGD,OAXD;AAYD,KAfH;AAiBArB,IAAAA,YAAY,GAAGA,YAAY,CAACC,MAAb,CAAoB;AAAA;AAAA,UAAEe,WAAF;;AAAA,aAAmB,CAACA,WAAW,CAACb,UAAZ,CAAuBS,cAAvB,CAApB;AAAA,KAApB,CAAf;AACD,GAtBD;AAwBAZ,EAAAA,YAAY,CAACO,OAAb,CAAqB,kBAAmB;AAAA;AAAA,QAAjBS,WAAiB;;AACtC,QAAMG,SAAS,GAAGH,WAAW,CAACH,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,EAA+BO,WAA/B,EAAlB;;AACA,QAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACvB,wBAAMxB,QAAN,EAAgBkB,WAAhB,EAA6BlB,QAAQ,CAAC4B,GAAtC,EAA2CJ,KAA3C;AACAxB,MAAAA,QAAQ,CAACkB,WAAD,CAAR,CAAsBM,KAAtB;AACD,KAHD;;AAIAxB,IAAAA,QAAQ,CAAC4B,GAAT,CAAaH,gBAAb,CAA8BJ,SAA9B,EAAyCE,OAAzC;AACAtB,IAAAA,aAAa,CAACyB,IAAd,CAAmB,YAAM;AACvB1B,MAAAA,QAAQ,CAAC4B,GAAT,CAAaD,mBAAb,CAAiCN,SAAjC,EAA4CE,OAA5C;AACD,KAFD;AAGD,GAVD;AAYA,SAAOtB,aAAP;AACD","sourcesContent":["import getAllProperties from '../../utils/object/getAllProperties';\nimport { debug } from './utils';\n\n/**\n * Bind ref and children component's events to their corresponding method.\n *\n * @param  {Base} instance  A Base instance.\n * @return {Array}          A list of methods to unbind the events.\n */\nexport default function bindEvents(instance) {\n  const unbindMethods = [];\n  // Bind method to events on refs\n  let eventMethods = getAllProperties(instance).filter(([name]) => name.startsWith('on'));\n\n  Object.entries(instance.$refs).forEach(([refName, $refOrRefs]) => {\n    const $refs = Array.isArray($refOrRefs) ? $refOrRefs : [$refOrRefs];\n    const refEventMethod = `on${refName.replace(/^\\w/, c => c.toUpperCase())}`;\n\n    eventMethods\n      .filter(([eventMethod]) => eventMethod.startsWith(refEventMethod))\n      .forEach(([eventMethod]) => {\n        $refs.forEach(($ref, index) => {\n          const eventName = eventMethod.replace(refEventMethod, '').toLowerCase();\n          const handler = event => {\n            debug(instance, eventMethod, $ref, event, index);\n            instance[eventMethod](event, index);\n          };\n          $ref.addEventListener(eventName, handler);\n\n          unbindMethods.push(() => {\n            $ref.removeEventListener(eventName, handler);\n          });\n        });\n      });\n\n    eventMethods = eventMethods.filter(([eventMethod]) => !eventMethod.startsWith(refEventMethod));\n  });\n\n  eventMethods.forEach(([eventMethod]) => {\n    const eventName = eventMethod.replace(/^on/, '').toLowerCase();\n    const handler = event => {\n      debug(instance, eventMethod, instance.$el, event);\n      instance[eventMethod](event);\n    };\n    instance.$el.addEventListener(eventName, handler);\n    unbindMethods.push(() => {\n      instance.$el.removeEventListener(eventName, handler);\n    });\n  });\n\n  return unbindMethods;\n}\n"],"file":"events.js"}