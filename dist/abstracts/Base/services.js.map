{"version":3,"sources":["../../../src/abstracts/Base/services.js"],"names":["initService","instance","method","service","add","remove","$id","args","callMethod","bindServices","unbindMethods","useScroll","useResize","useRaf","usePointer","useKey","loadedHandler","event","window","addEventListener","push","removeEventListener"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAQA,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAI,CAAC,sBAAUF,QAAV,EAAoBC,MAApB,CAAL,EAAkC;AAChC,WAAO,YAAM,CAAE,CAAf;AACD;;AAH6C,iBAKtBC,OAAO,EALe;AAAA,MAKtCC,GALsC,YAKtCA,GALsC;AAAA,MAKjCC,MALiC,YAKjCA,MALiC;;AAM9CD,EAAAA,GAAG,CAACH,QAAQ,CAACK,GAAV,EAAe,YAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAC7BC,qCAAWP,QAAX,EAAqBC,MAArB,SAAgCK,IAAhC;AACD,GAFE,CAAH;AAIA,SAAO;AAAA,WAAMF,MAAM,CAACJ,QAAQ,CAACK,GAAV,CAAZ;AAAA,GAAP;AACD;AAED;;;;;;;AAKe,SAASG,YAAT,CAAsBR,QAAtB,EAAgC;AAC7C,MAAMS,aAAa,GAAG,CACpBV,WAAW,CAACC,QAAD,EAAW,UAAX,EAAuBU,eAAvB,CADS,EAEpBX,WAAW,CAACC,QAAD,EAAW,SAAX,EAAsBW,eAAtB,CAFS,EAGpBZ,WAAW,CAACC,QAAD,EAAW,QAAX,EAAqBY,YAArB,CAHS,EAIpBb,WAAW,CAACC,QAAD,EAAW,OAAX,EAAoBa,gBAApB,CAJS,EAKpBd,WAAW,CAACC,QAAD,EAAW,OAAX,EAAoBc,aAApB,CALS,CAAtB,CAD6C,CAS7C;AACA;;AACA,MAAI,sBAAUd,QAAV,EAAoB,QAApB,CAAJ,EAAmC;AACjC,QAAMe,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC7B,6BAAWhB,QAAX,EAAqB,QAArB,EAA+B;AAAEgB,QAAAA,KAAK,EAALA;AAAF,OAA/B;AACD,KAFD;;AAGAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCH,aAAhC;AACAN,IAAAA,aAAa,CAACU,IAAd,CAAmB,YAAM;AACvBF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,MAA3B,EAAmCL,aAAnC;AACD,KAFD;AAGD;;AAED,SAAON,aAAP;AACD","sourcesContent":["import usePointer from '../../services/pointer';\nimport useRaf from '../../services/raf';\nimport useResize from '../../services/resize';\nimport useScroll from '../../services/scroll';\nimport useKey from '../../services/key';\nimport { hasMethod, callMethod } from './utils';\n\n/**\n * Init the given service and bind it to the given instance.\n *\n * @param  {Base}     instance The Base instance.\n * @param  {String}   method   The instance to test for binding\n * @param  {Function} service  The service `use...` function\n * @return {Function}          A function to unbind the service\n */\nfunction initService(instance, method, service) {\n  if (!hasMethod(instance, method)) {\n    return () => {};\n  }\n\n  const { add, remove } = service();\n  add(instance.$id, (...args) => {\n    callMethod(instance, method, ...args);\n  });\n\n  return () => remove(instance.$id);\n}\n\n/**\n * Use the services.\n * @param  {Base} instance A Base class instance.\n * @return {Array}         A list of unbind methods.\n */\nexport default function bindServices(instance) {\n  const unbindMethods = [\n    initService(instance, 'scrolled', useScroll),\n    initService(instance, 'resized', useResize),\n    initService(instance, 'ticked', useRaf),\n    initService(instance, 'moved', usePointer),\n    initService(instance, 'keyed', useKey),\n  ];\n\n  // Fire the `loaded` method on window load\n  // @todo remove this? or move it elsewhere?\n  if (hasMethod(instance, 'loaded')) {\n    const loadedHandler = event => {\n      callMethod(instance, 'loaded', { event });\n    };\n    window.addEventListener('load', loadedHandler);\n    unbindMethods.push(() => {\n      window.removeEventListener('load', loadedHandler);\n    });\n  }\n\n  return unbindMethods;\n}\n"],"file":"services.js"}