{"version":3,"sources":["../../../src/abstracts/Base/services.js"],"names":["usePointer","useRaf","useResize","useScroll","useKey","hasMethod","callMethod","initService","instance","method","service","add","remove","$id","args","bindServices","unbindMethods","loadedHandler","event","window","addEventListener","push","removeEventListener"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,SAAtC;AAEA;;;;AAIA;;;;;;;;;AAQA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAI,CAACL,SAAS,CAACG,QAAD,EAAWC,MAAX,CAAd,EAAkC;AAChC,WAAO,YAAM,CAAE,CAAf;AACD;;AAH6C,iBAKtBC,OAAO,EALe;AAAA,MAKtCC,GALsC,YAKtCA,GALsC;AAAA,MAKjCC,MALiC,YAKjCA,MALiC;;AAM9CD,EAAAA,GAAG,CACDH,QAAQ,CAACK,GADR;AAED;;;AAGA,cAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACXR,IAAAA,UAAU,MAAV,UAAWE,QAAX,EAAqBC,MAArB,SAAgCK,IAAhC;AACD,GAPA,CAAH;AAUA,SAAO;AAAA,WAAMF,MAAM,CAACJ,QAAQ,CAACK,GAAV,CAAZ;AAAA,GAAP;AACD;AAED;;;;;;;AAKA,eAAe,SAASE,YAAT,CAAsBP,QAAtB,EAAgC;AAC7C,MAAMQ,aAAa,GAAG,CACpBT,WAAW,CAACC,QAAD,EAAW,UAAX,EAAuBL,SAAvB,CADS,EAEpBI,WAAW,CAACC,QAAD,EAAW,SAAX,EAAsBN,SAAtB,CAFS,EAGpBK,WAAW,CAACC,QAAD,EAAW,QAAX,EAAqBP,MAArB,CAHS,EAIpBM,WAAW,CAACC,QAAD,EAAW,OAAX,EAAoBR,UAApB,CAJS,EAKpBO,WAAW,CAACC,QAAD,EAAW,OAAX,EAAoBJ,MAApB,CALS,CAAtB,CAD6C,CAS7C;AACA;;AACA,MAAIC,SAAS,CAACG,QAAD,EAAW,QAAX,CAAb,EAAmC;AACjC;;;AAGA,QAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/BZ,MAAAA,UAAU,CAACE,QAAD,EAAW,QAAX,EAAqB;AAAEU,QAAAA,KAAK,EAALA;AAAF,OAArB,CAAV;AACD,KAFD;;AAGAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgCH,aAAhC;AACAD,IAAAA,aAAa,CAACK,IAAd,CAAmB,YAAM;AACvBF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,MAA3B,EAAmCL,aAAnC;AACD,KAFD;AAGD;;AAED,SAAOD,aAAP;AACD","sourcesContent":["import usePointer from '../../services/pointer';\nimport useRaf from '../../services/raf';\nimport useResize from '../../services/resize';\nimport useScroll from '../../services/scroll';\nimport useKey from '../../services/key';\nimport { hasMethod, callMethod } from './utils';\n\n/**\n * @typedef {import('./index').default} Base\n */\n\n/**\n * Init the given service and bind it to the given instance.\n *\n * @param  {Base}     instance The Base instance.\n * @param  {String}   method   The instance to test for binding\n * @param  {Function} service  The service `use...` function\n * @return {Function}          A function to unbind the service\n */\nfunction initService(instance, method, service) {\n  if (!hasMethod(instance, method)) {\n    return () => {};\n  }\n\n  const { add, remove } = service();\n  add(\n    instance.$id,\n    /**\n     * @param {any[]} args\n     */\n    (...args) => {\n      callMethod(instance, method, ...args);\n    }\n  );\n\n  return () => remove(instance.$id);\n}\n\n/**\n * Use the services.\n * @param  {Base} instance A Base class instance.\n * @return {Array}         A list of unbind methods.\n */\nexport default function bindServices(instance) {\n  const unbindMethods = [\n    initService(instance, 'scrolled', useScroll),\n    initService(instance, 'resized', useResize),\n    initService(instance, 'ticked', useRaf),\n    initService(instance, 'moved', usePointer),\n    initService(instance, 'keyed', useKey),\n  ];\n\n  // Fire the `loaded` method on window load\n  // @todo remove this? or move it elsewhere?\n  if (hasMethod(instance, 'loaded')) {\n    /**\n     * @param {Event} event\n     */\n    const loadedHandler = (event) => {\n      callMethod(instance, 'loaded', { event });\n    };\n    window.addEventListener('load', loadedHandler);\n    unbindMethods.push(() => {\n      window.removeEventListener('load', loadedHandler);\n    });\n  }\n\n  return unbindMethods;\n}\n"],"file":"services.js"}