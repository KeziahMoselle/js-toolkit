{"version":3,"sources":["../../../src/abstracts/Base/refs.js"],"names":["getRefs","instance","element","allRefs","Array","from","querySelectorAll","childrenRefs","elements","filter","ref","includes","refs","reduce","$refs","$ref","refName","dataset","$realRef","__base__","endsWith","replace","isArray","push","$emit"],"mappings":";;;;;;;;AAAA;;;;;;;AAOO,SAASA,OAAT,CAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;AACzC,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWH,OAAO,CAACI,gBAAR,cAAX,CAAhB;AACA,MAAMC,YAAY,GAAGH,KAAK,CAACC,IAAN,CAAWH,OAAO,CAACI,gBAAR,sCAAX,CAArB;AACA,MAAME,QAAQ,GAAGL,OAAO,CAACM,MAAR,CAAe,UAACC,GAAD;AAAA,WAAS,CAACH,YAAY,CAACI,QAAb,CAAsBD,GAAtB,CAAV;AAAA,GAAf,CAAjB;AAEA,MAAME,IAAI,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC5C,QAAIC,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAaP,GAA3B;AACA,QAAMQ,QAAQ,GAAGH,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACI,QAArB,GAAgCJ,IAAjD;;AAEA,QAAIC,OAAO,CAACI,QAAR,CAAiB,IAAjB,CAAJ,EAA4B;AAC1BJ,MAAAA,OAAO,GAAGA,OAAO,CAACK,OAAR,CAAgB,OAAhB,EAAyB,EAAzB,CAAV;;AAEA,UAAI,CAACP,KAAK,CAACE,OAAD,CAAV,EAAqB;AACnBF,QAAAA,KAAK,CAACE,OAAD,CAAL,GAAiB,EAAjB;AACD;AACF;;AAED,QAAIF,KAAK,CAACE,OAAD,CAAT,EAAoB;AAClB,UAAIZ,KAAK,CAACkB,OAAN,CAAcR,KAAK,CAACE,OAAD,CAAnB,CAAJ,EAAmC;AACjCF,QAAAA,KAAK,CAACE,OAAD,CAAL,CAAeO,IAAf,CAAoBL,QAApB;AACD,OAFD,MAEO;AACLJ,QAAAA,KAAK,CAACE,OAAD,CAAL,GAAiB,CAACF,KAAK,CAACE,OAAD,CAAN,EAAiBE,QAAjB,CAAjB;AACD;AACF,KAND,MAMO;AACLJ,MAAAA,KAAK,CAACE,OAAD,CAAL,GAAiBE,QAAjB;AACD;;AAED,WAAOJ,KAAP;AACD,GAvBY,EAuBV,EAvBU,CAAb;AAyBAb,EAAAA,QAAQ,CAACuB,KAAT,CAAe,UAAf,EAA2BZ,IAA3B;AACA,SAAOA,IAAP;AACD;;eAEc;AACbZ,EAAAA,OAAO,EAAPA;AADa,C","sourcesContent":["/**\n * Get all refs of a component.\n *\n * @param  {Base}        instance The component's instance.\n * @param  {HTMLElement} element  The component's root element.\n * @return {Object}               Return an object containing all the component's refs.\n */\nexport function getRefs(instance, element) {\n  const allRefs = Array.from(element.querySelectorAll(`[data-ref]`));\n  const childrenRefs = Array.from(element.querySelectorAll(`:scope [data-component] [data-ref]`));\n  const elements = allRefs.filter((ref) => !childrenRefs.includes(ref));\n\n  const refs = elements.reduce(($refs, $ref) => {\n    let refName = $ref.dataset.ref;\n    const $realRef = $ref.__base__ ? $ref.__base__ : $ref;\n\n    if (refName.endsWith('[]')) {\n      refName = refName.replace(/\\[\\]$/, '');\n\n      if (!$refs[refName]) {\n        $refs[refName] = [];\n      }\n    }\n\n    if ($refs[refName]) {\n      if (Array.isArray($refs[refName])) {\n        $refs[refName].push($realRef);\n      } else {\n        $refs[refName] = [$refs[refName], $realRef];\n      }\n    } else {\n      $refs[refName] = $realRef;\n    }\n\n    return $refs;\n  }, {});\n\n  instance.$emit('get:refs', refs);\n  return refs;\n}\n\nexport default {\n  getRefs,\n};\n"],"file":"refs.js"}