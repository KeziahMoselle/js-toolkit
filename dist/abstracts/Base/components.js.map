{"version":3,"sources":["../../../src/abstracts/Base/components.js"],"names":["debug","mountComponent","component","Promise","then","instance","$mount","mountComponents","$children","Object","values","forEach","$child","destroyComponent","$destroy","destroyComponents"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;;AAYA,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACjC,MAAIA,SAAS,YAAYC,OAAzB,EAAkC;AAChCD,IAAAA,SAAS,CAACE,IAAV,CAAe,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,MAAT,EAAd;AAAA,KAAf;AACD,GAFD,MAEO;AACLJ,IAAAA,SAAS,CAACI,MAAV;AACD;AACF;;AAQD,OAAO,SAASC,eAAT,CAAyBF,QAAzB,EAAmC;AACxC,MAAI,CAACA,QAAQ,CAACG,SAAd,EAAyB;AACvB;AACD;;AAEDR,EAAAA,KAAK,CAACK,QAAD,EAAW,iBAAX,EAA8BA,QAAQ,CAACG,SAAvC,CAAL;AAEAC,EAAAA,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACG,SAAvB,EAAkCG,OAAlC,CAA0C,UAACC,MAAD,EAAY;AACpDA,IAAAA,MAAM,CAACD,OAAP,CAAeV,cAAf;AACD,GAFD;AAGD;;AAQD,SAASY,gBAAT,CAA0BX,SAA1B,EAAqC;AACnC,MAAIA,SAAS,YAAYC,OAAzB,EAAkC;AAChCD,IAAAA,SAAS,CAACE,IAAV,CAAe,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACS,QAAT,EAAd;AAAA,KAAf;AACD,GAFD,MAEO;AACLZ,IAAAA,SAAS,CAACY,QAAV;AACD;AACF;;AAQD,OAAO,SAASC,iBAAT,CAA2BV,QAA3B,EAAqC;AAC1C,MAAI,CAACA,QAAQ,CAACG,SAAd,EAAyB;AACvB;AACD;;AACDR,EAAAA,KAAK,CAACK,QAAD,EAAW,mBAAX,EAAgCA,QAAQ,CAACG,SAAzC,CAAL;AAEAC,EAAAA,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACG,SAAvB,EAAkCG,OAAlC,CAA0C,UAACC,MAAD,EAAY;AACpDA,IAAAA,MAAM,CAACD,OAAP,CAAeE,gBAAf;AACD,GAFD;AAGD","sourcesContent":["import { debug } from './utils';\n\n/**\n * @typedef {import('./index.js').default} Base\n */\n\n/**\n * Mount a given component which might be async.\n *\n * @param  {Base|Promise} component The component to mount.\n * @return {void}\n */\nfunction mountComponent(component) {\n  if (component instanceof Promise) {\n    component.then((instance) => instance.$mount());\n  } else {\n    component.$mount();\n  }\n}\n\n/**\n * Mount children components of a given instance.\n *\n * @param  {Base} instance The parent component's instance.\n * @return {void}\n */\nexport function mountComponents(instance) {\n  if (!instance.$children) {\n    return;\n  }\n\n  debug(instance, 'mountComponents', instance.$children);\n\n  Object.values(instance.$children).forEach(($child) => {\n    $child.forEach(mountComponent);\n  });\n}\n\n/**\n * Destroy a given component which might be async.\n *\n * @param  {Base|Promise} component The component to destroy.\n * @return {void}\n */\nfunction destroyComponent(component) {\n  if (component instanceof Promise) {\n    component.then((instance) => instance.$destroy());\n  } else {\n    component.$destroy();\n  }\n}\n\n/**\n * Destroy children components of a given instance.\n *\n * @param  {Base} instance The parent component's instance.\n * @return {void}\n */\nexport function destroyComponents(instance) {\n  if (!instance.$children) {\n    return;\n  }\n  debug(instance, 'destroyComponents', instance.$children);\n\n  Object.values(instance.$children).forEach(($child) => {\n    $child.forEach(destroyComponent);\n  });\n}\n"],"file":"components.js"}