{"version":3,"sources":["../../../src/abstracts/Base/index.js"],"names":["nanoid","autoBind","EventManager","callMethod","debug","log","getConfig","getChildren","getComponentElements","getOptions","getRefs","mountComponents","destroyComponents","bindServices","bindEvents","Base","$el","components","element","Error","name","$id","$isMounted","$options","__base__","Object","defineProperty","get","configurable","exclude","_excludeFromAutoBind","unbindMethods","$on","forEach","method","args","$destroy","value","writable","nameOrSelector","map","el","$mount"],"mappings":"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","sourcesContent":["import nanoid from 'nanoid/non-secure';\nimport autoBind from '../../utils/object/autoBind';\nimport EventManager from '../EventManager';\nimport { callMethod, debug, log, getConfig } from './utils';\n// eslint-disable-next-line import/no-cycle\nimport { getChildren, getComponentElements } from './children';\nimport { getOptions } from './options';\nimport { getRefs } from './refs';\nimport { mountComponents, destroyComponents } from './components';\nimport bindServices from './services';\n// eslint-disable-next-line import/no-cycle\nimport bindEvents from './events';\n\n/**\n * @typedef {typeof Base} BaseComponent\n * @typedef {() => Promise<BaseComponent | { default: BaseComponent }>} BaseAsyncComponent\n * @typedef {HTMLElement & { __base__?: Base | 'terminated' }} BaseHTMLElement\n * @typedef {{ name: string, debug: boolean, log: boolean }} BaseOptions\n * @typedef {{ [name:string]: HTMLElement | BaseComponent | Array<HTMLElement|BaseComponent> }} BaseRefs\n * @typedef {{ [nameOrSelector:string]: Array<Base | Promise<Base>> }} BaseChildren\n * @typedef {{ [nameOrSelector:string]: BaseComponent | BaseAsyncComponent }} BaseConfigComponents\n * @typedef {import('./classes/Options').OptionsSchema} BaseConfigOptions\n */\n\n/**\n * @typedef {Object} BaseConfig\n * @property {String} name\n * @property {Boolean} [debug]\n * @property {Boolean} [log]\n * @property {String[]} [refs]\n * @property {BaseConfigComponents} [components]\n * @property {BaseConfigOptions} [options]\n */\n\n/**\n * Page lifecycle class\n */\nexport default class Base extends EventManager {\n  /**\n   * The instance parent.\n   * @type {Base}\n   */\n  $parent = null;\n\n  /**\n   * The state of the component.\n   * @type {Boolean}\n   */\n  $isMounted = false;\n\n  /**\n   * This is a Base instance.\n   * @type {Boolean}\n   */\n  static $isBase = true;\n\n  /**\n   * Get properties to exclude from the autobind call.\n   * @return {Array<String|RegExp>}\n   */\n  get _excludeFromAutoBind() {\n    return [\n      '$mount',\n      '$update',\n      '$destroy',\n      '$terminate',\n      '$log',\n      '$on',\n      '$once',\n      '$off',\n      '$emit',\n      'mounted',\n      'loaded',\n      'ticked',\n      'resized',\n      'moved',\n      'keyed',\n      'scrolled',\n      'destroyed',\n      'terminated',\n    ];\n  }\n\n  /**\n   * @deprecated Use the static `config` property instead.\n   * @return {BaseConfig}\n   */\n  get config() {\n    return null;\n  }\n\n  /** @type {BaseConfig} */\n  static config;\n\n  /**\n   * Get the component's refs.\n   * @return {BaseRefs}\n   */\n  get $refs() {\n    return getRefs(this, this.$el);\n  }\n\n  /**\n   * Get the component's children components.\n   * @return {BaseChildren}\n   */\n  get $children() {\n    const { components } = getConfig(this);\n    return getChildren(this, this.$el, components || {});\n  }\n\n  /**\n   * Class constructor where all the magic takes place.\n   *\n   * @param {BaseHTMLElement} element The component's root element dd.\n   */\n  constructor(element) {\n    super();\n\n    if (!element) {\n      throw new Error('The root element must be defined.');\n    }\n\n    const { name } = getConfig(this);\n\n    /** @type {String} */\n    this.$id = `${name}-${nanoid()}`;\n\n    /** @type {BaseHTMLElement} */\n    this.$el = element;\n\n    /** @type {Boolean} */\n    this.$isMounted = false;\n\n    /** @type {BaseOptions} */\n    this.$options = getOptions(this, element, getConfig(this));\n\n    if (!this.$el.__base__) {\n      Object.defineProperty(this.$el, '__base__', {\n        get: () => this,\n        configurable: true,\n      });\n    }\n\n    // Autobind all methods to the instance\n    autoBind(this, {\n      exclude: [...(this._excludeFromAutoBind || [])],\n    });\n\n    let unbindMethods = [];\n    this.$on('mounted', () => {\n      mountComponents(this);\n      unbindMethods = [...bindServices(this), ...bindEvents(this)];\n      this.$isMounted = true;\n    });\n\n    this.$on('updated', () => {\n      unbindMethods.forEach((method) => method());\n      mountComponents(this);\n      unbindMethods = [...bindServices(this), ...bindEvents(this)];\n    });\n\n    this.$on('destroyed', () => {\n      this.$isMounted = false;\n      unbindMethods.forEach((method) => method());\n      destroyComponents(this);\n    });\n\n    debug(this, 'constructor', this);\n    return this;\n  }\n\n  /**\n   * Small helper to log stuff.\n   *\n   * @param  {...any} args The arguments passed to the method\n   * @return {void}\n   */\n  $log(...args) {\n    if (this.$options.log) {\n      log(this, ...args);\n    }\n  }\n\n  /**\n   * Trigger the `mounted` callback.\n   */\n  $mount() {\n    debug(this, '$mount');\n    callMethod(this, 'mounted');\n    return this;\n  }\n\n  /**\n   * Update the instance children.\n   */\n  $update() {\n    debug(this, '$update');\n    callMethod(this, 'updated');\n    return this;\n  }\n\n  /**\n   * Trigger the `destroyed` callback.\n   */\n  $destroy() {\n    debug(this, '$destroy');\n    callMethod(this, 'destroyed');\n    return this;\n  }\n\n  /**\n   * Terminate a child instance when it is not needed anymore.\n   * @return {void}\n   */\n  $terminate() {\n    debug(this, '$terminate');\n\n    // First, destroy the component.\n    this.$destroy();\n\n    // Execute the `terminated` hook if it exists\n    callMethod(this, 'terminated');\n\n    // Delete the reference to the instance\n    // delete this.$el.__base__;\n\n    // And update its status to prevent re-instantiation when accessing the\n    // parent's `$children` property\n    Object.defineProperty(this.$el, '__base__', {\n      value: 'terminated',\n      configurable: false,\n      writable: false,\n    });\n  }\n\n  /**\n   * Factory method to generate multiple instance of the class.\n   *\n   * @param  {String}      nameOrSelector The selector on which to mount each instance.\n   * @return {Array<Base>}                A list of the created instance.\n   */\n  static $factory(nameOrSelector) {\n    if (!nameOrSelector) {\n      throw new Error(\n        'The $factory method requires a componentâ€™s name or selector to be specified.'\n      );\n    }\n\n    return getComponentElements(nameOrSelector).map((el) => new this(el).$mount());\n  }\n\n  /**\n   * Hello world.\n   */\n  mounted() {}\n}\n"],"file":"index.js"}