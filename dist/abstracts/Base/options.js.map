{"version":3,"sources":["../../../src/abstracts/Base/options.js"],"names":["getOptions","instance","element","config","options","dataset","JSON","parse","err","Error","$emit","setOptions","newOptions","stringify"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;;;;;;;AAQO,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,MAAvC,EAA+C;AACpD,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIF,OAAO,CAACG,OAAR,CAAgBD,OAApB,EAA6B;AAC3B,QAAI;AACFA,MAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACG,OAAR,CAAgBD,OAA3B,CAAV;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,YAAM,IAAIC,KAAJ,CAAU,wEAAV,CAAN;AACD;AACF;;AAEDL,EAAAA,OAAO,GAAG,wBAAMD,MAAN,EAAcC,OAAd,CAAV;AACAH,EAAAA,QAAQ,CAACS,KAAT,CAAe,aAAf,EAA8BN,OAA9B;AACA,SAAOA,OAAP;AACD;AAED;;;;;;;;;AAOO,SAASO,UAAT,CAAoBV,QAApB,EAA8BC,OAA9B,EAAuCU,UAAvC,EAAmD;AACxD,MAAIR,OAAO,GAAG,EAAd;;AACA,MAAIF,OAAO,CAACG,OAAR,CAAgBD,OAApB,EAA6B;AAC3B,QAAI;AACFA,MAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACG,OAAR,CAAgBD,OAA3B,CAAV;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,YAAM,IAAIC,KAAJ,CAAU,wEAAV,CAAN;AACD;AACF;;AACDL,EAAAA,OAAO,GAAG,wBAAMA,OAAN,EAAeQ,UAAf,CAAV;AACAV,EAAAA,OAAO,CAACG,OAAR,CAAgBD,OAAhB,GAA0BE,IAAI,CAACO,SAAL,CAAeT,OAAf,CAA1B;AACD;;eAEc;AACbJ,EAAAA,UAAU,EAAVA,UADa;AAEbW,EAAAA,UAAU,EAAVA;AAFa,C","sourcesContent":["import merge from 'deepmerge';\n\n/**\n * Get a component's options.\n *\n * @param  {Base}        instance The component's instance.\n * @param  {HTMLElement} element  The component's root element.\n * @param  {Object}      config   The component's default config.\n * @return {Object}               The component's merged options.\n */\nexport function getOptions(instance, element, config) {\n  let options = {};\n  if (element.dataset.options) {\n    try {\n      options = JSON.parse(element.dataset.options);\n    } catch (err) {\n      throw new Error('Can not parse the `data-options` attribute. Is it a valid JSON string?');\n    }\n  }\n\n  options = merge(config, options);\n  instance.$emit('get:options', options);\n  return options;\n}\n\n/**\n * Set a component instance options.\n *\n * @param {Base}        instance   The component's instance.\n * @param {HTMLElement} element    The component's root element.\n * @param {Object}      newOptions The new options object.\n */\nexport function setOptions(instance, element, newOptions) {\n  let options = {};\n  if (element.dataset.options) {\n    try {\n      options = JSON.parse(element.dataset.options);\n    } catch (err) {\n      throw new Error('Can not parse the `data-options` attribute. Is it a valid JSON string?');\n    }\n  }\n  options = merge(options, newOptions);\n  element.dataset.options = JSON.stringify(options);\n}\n\nexport default {\n  getOptions,\n  setOptions,\n};\n"],"file":"options.js"}