{"version":3,"sources":["../../../src/abstracts/Base/options.js"],"names":["Options","warn","getOptions","instance","element","config","schema","options","prototype","getterConfig","staticConfig","constructor","Object","assign","getPrototypeOf","propsToInclude","name","type","Boolean","String","forEach","prop","default","propsToExclude","keys","propName","includes","value","undefined","types","Array","legacyOptions","dataset","JSON","parse","err","Error","entries","optionName","optionValue","$emit"],"mappings":"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","sourcesContent":["import Options from './classes/Options';\nimport { warn } from './utils';\n\n/**\n * @typedef {import('./index').default} Base\n */\n\n/**\n * Get a component's options.\n *\n * @param  {Base}        instance The component's instance.\n * @param  {HTMLElement} element  The component's root element.\n * @param  {Object}      config   The component's default config.\n * @return {Object}               The component's merged options.\n */\nexport function getOptions(instance, element, config) {\n  let schema = { ...(config.options || {}) };\n\n  /** @type {Base|false} Merge inherited options. */\n  let prototype = instance;\n  while (prototype) {\n    const getterConfig = prototype.config;\n    // @ts-ignore\n    const staticConfig = prototype.constructor.config;\n    if (getterConfig || staticConfig) {\n      schema = Object.assign(\n        (getterConfig || {}).options || {},\n        (staticConfig || {}).options || {},\n        schema\n      );\n      prototype = Object.getPrototypeOf(prototype);\n    } else {\n      prototype = false;\n    }\n  }\n\n  // Add legacy options from the config\n  const propsToInclude = [\n    { name: 'log', type: Boolean },\n    { name: 'debug', type: Boolean },\n    { name: 'name', type: String },\n  ];\n\n  propsToInclude.forEach((prop) => {\n    schema[prop.name] = { type: prop.type, default: prop.type(config[prop.name]) };\n  });\n\n  // Add legacy options to the schema\n  const propsToExclude = ['name', 'log', 'debug', 'components', 'refs', 'options'];\n  Object.keys(config).forEach((propName) => {\n    if (propsToExclude.includes(propName)) {\n      return;\n    }\n\n    const value = config[propName];\n    let type = value === null || value === undefined ? Object : value.constructor;\n\n    // Default to object type as it should work for any values.\n    if (!Options.types.includes(type)) {\n      type = Object;\n    }\n\n    warn(\n      instance,\n      '\\n  Options must be defined in the `config.options` property.',\n      `\\n  Consider moving the \\`config.${propName}\\` option to \\`config.options.${propName}\\`.`,\n    );\n\n    if (type === Array || type === Object) {\n      schema[propName] = { type, default: () => value };\n    } else {\n      schema[propName] = { type, default: value };\n    }\n  });\n\n  const options = new Options(element, schema);\n\n  // Update legacy options with value from the `data-options` attribute\n  let legacyOptions = {};\n  if (element.dataset.options) {\n    warn(\n      instance,\n      'The `data-options` attribute usage is deprecated, use multiple `data-option-...` attributes instead.'\n    );\n    try {\n      legacyOptions = JSON.parse(element.dataset.options);\n    } catch (err) {\n      throw new Error('Can not parse the `data-options` attribute. Is it a valid JSON string?');\n    }\n  }\n\n  Object.entries(legacyOptions).forEach(([optionName, optionValue]) => {\n    options[optionName] = optionValue;\n  });\n\n  instance.$emit('get:options', options);\n\n  return options;\n}\n\nexport default {\n  getOptions,\n};\n"],"file":"options.js"}