{"version":3,"sources":["../../src/abstracts/Service.js"],"names":["schema","init","test","descriptor","value","error","kill","props","get","key","callback","implementations","testImplementation","obj","descriptors","Object","getOwnPropertyDescriptors","methods","keys","entries","forEach","includes","Error","testSchema","object","hasOwnProperty","call","Service","callbacks","Map","isInit","getPrototypeOf","has","size","set","args"],"mappings":"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","sourcesContent":["/** @type {Object} A schema used to validate objects' keys */\nconst schema = {\n  init: {\n    test: descriptor => typeof descriptor.value === 'function',\n    error: 'The `init` method must be implemented.',\n  },\n  kill: {\n    test: descriptor => typeof descriptor.value === 'function',\n    error: 'The `kill` method must be implemented.',\n  },\n  props: {\n    test: descriptor => typeof descriptor.get === 'function',\n    error: 'The `props` property must be a getter.',\n  },\n  key: {\n    test: descriptor => typeof descriptor.value === 'string',\n    error: 'The `key` parameter must be a string.',\n  },\n  callback: {\n    test: descriptor => typeof descriptor.value === 'function',\n    error: 'The `callback` parameter must be a function.',\n  },\n};\n\n/**\n * List of methods or properties that MUST be implemented by child classes.\n * @type {Object}\n */\nconst implementations = {\n  init: 'The `init` method must be implemented.',\n  kill: 'The `kill` method must be implemented.',\n  props: 'The `props` getter must be implemented.',\n};\n\n/**\n * Test if the children classes implements this class correctly\n *\n * @return {Service} The current instance\n */\nfunction testImplementation(obj) {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const methods = Object.keys(descriptors);\n\n  Object.entries(implementations).forEach(([key, error]) => {\n    if (!methods.includes(key)) {\n      throw new Error(error);\n    }\n  });\n\n  return this;\n}\n\n/**\n * Test the given object against the schema.\n *\n * @param  {Object}  object The object to test\n * @return {Service}        The current instance\n */\nfunction testSchema(object) {\n  Object.entries(Object.getOwnPropertyDescriptors(object)).forEach(([key, value]) => {\n    if ({}.hasOwnProperty.call(schema, key) && !schema[key].test(value)) {\n      throw new Error(schema[key].error);\n    }\n  });\n}\n\n/**\n * Service abstract class\n */\nexport default class Service {\n  /**\n   * Class constructor, used to test the abstract class implementation.\n   *\n   * @return {Service} The current instance\n   */\n  constructor() {\n    this.callbacks = new Map();\n    this.isInit = false;\n    testImplementation(Object.getPrototypeOf(this));\n    testSchema(Object.getPrototypeOf(this));\n  }\n\n  /**\n   * Method to initialize the service behaviors.\n   * This method MUST be implemented by the service implementing this class.\n   *\n   * @return {Service} The current instance\n   */\n  init() {\n    return this;\n  }\n\n  /**\n   * Method to kill the service behaviors.\n   * This method MUST be implemented by the service implementing this class.\n   *\n   * @return {Service} The current instance\n   */\n  kill() {\n    return this;\n  }\n\n  /**\n   * Add a callback.\n   *\n   * @param  {String}   key      The callback's identifier\n   * @param  {Function} callback The callback function\n   * @return {Service}           The current instance\n   */\n  add(key, callback) {\n    testSchema({ key, callback });\n\n    if (this.has(key)) {\n      throw new Error(`A callback with the key \\`${key}\\` has already been registered.`);\n    }\n\n    // Initialize the service when we add the first callback\n    if (this.callbacks.size === 0 && !this.isInit) {\n      this.init();\n      this.isInit = true;\n    }\n\n    this.callbacks.set(key, callback);\n    return this;\n  }\n\n  /**\n   * Test if a callback with the given key has already been added.\n   *\n   * @param  {String}  key The identifier to test\n   * @return {Boolean}     Whether or not the identifier already exists\n   */\n  has(key) {\n    testSchema({ key });\n    return this.callbacks.has(key);\n  }\n\n  /**\n   * Get the callback tied to the given key.\n   *\n   * @param  {String}   key The identifier to get\n   * @return {Function}     The callback function\n   */\n  get(key) {\n    testSchema({ key });\n    return this.callbacks.get(key);\n  }\n\n  /**\n   * Remove the callback tied to the given key.\n   *\n   * @param  {String} key The identifier to remove\n   * @return {Service}    The current instance\n   */\n  remove(key) {\n    testSchema({ key });\n    this.callbacks.delete(key);\n\n    // Kill the service when we add the first callback\n    if (this.callbacks.size === 0 && this.isInit) {\n      this.kill();\n      this.isInit = false;\n    }\n\n    return this;\n  }\n\n  /**\n   * Trigger each added callback with the given arguments.\n   *\n   * @param  {Array}   args All the arguments to apply to the callback\n   * @return {Service}      The current instance\n   */\n  trigger(...args) {\n    this.callbacks.forEach(callback => {\n      callback(...args);\n    });\n\n    return this;\n  }\n}\n"],"file":"Service.js"}