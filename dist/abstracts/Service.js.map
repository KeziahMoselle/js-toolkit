{"version":3,"sources":["../../src/abstracts/Service.js"],"names":["Service","callbacks","Map","isInit","Error","key","callback","has","size","init","set","get","delete","kill","args","forEach"],"mappings":";;;AAAA;;;IAGqBA,O;AACnB;;;;;AAKA,qBAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA,SAAKC,MAAL,GAAc,KAAd;AACD;AAED;;;;;;;;;;AASA;;;;;;2BAMO;AACL,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;AAED;;;;;;;;;2BAMO;AACL,YAAM,IAAIA,KAAJ,CAAU,wCAAV,CAAN;AACD;AAED;;;;;;;;;;wBAOIC,G,EAAKC,Q,EAAU;AACjB,UAAI,KAAKC,GAAL,CAASF,GAAT,CAAJ,EAAmB;AACjB,cAAM,IAAID,KAAJ,oCAAuCC,GAAvC,oCAAN;AACD,OAHgB,CAKjB;;;AACA,UAAI,KAAKJ,SAAL,CAAeO,IAAf,KAAwB,CAAxB,IAA6B,CAAC,KAAKL,MAAvC,EAA+C;AAC7C,aAAKM,IAAL;AACA,aAAKN,MAAL,GAAc,IAAd;AACD;;AAED,WAAKF,SAAL,CAAeS,GAAf,CAAmBL,GAAnB,EAAwBC,QAAxB;AACA,aAAO,IAAP;AACD;AAED;;;;;;;;;wBAMID,G,EAAK;AACP,aAAO,KAAKJ,SAAL,CAAeM,GAAf,CAAmBF,GAAnB,CAAP;AACD;AAED;;;;;;;;;wBAMIA,G,EAAK;AACP,aAAO,KAAKJ,SAAL,CAAeU,GAAf,CAAmBN,GAAnB,CAAP;AACD;AAED;;;;;;;;;2BAMOA,G,EAAK;AACV,WAAKJ,SAAL,CAAeW,MAAf,CAAsBP,GAAtB,EADU,CAGV;;AACA,UAAI,KAAKJ,SAAL,CAAeO,IAAf,KAAwB,CAAxB,IAA6B,KAAKL,MAAtC,EAA8C;AAC5C,aAAKU,IAAL;AACA,aAAKV,MAAL,GAAc,KAAd;AACD;;AAED,aAAO,IAAP;AACD;AAED;;;;;;;;;8BAMiB;AAAA,wCAANW,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACf,WAAKb,SAAL,CAAec,OAAf,CAAuB,UAACT,QAAD,EAAc;AACnCA,QAAAA,QAAQ,MAAR,SAAYQ,IAAZ;AACD,OAFD;AAIA,aAAO,IAAP;AACD;;;wBAhGW;AACV,YAAM,IAAIV,KAAJ,CAAU,yCAAV,CAAN;AACD;;;;;;SAlBkBJ,O","sourcesContent":["/**\n * Service abstract class\n */\nexport default class Service {\n  /**\n   * Class constructor, used to test the abstract class implementation.\n   *\n   * @return {Service} The current instance\n   */\n  constructor() {\n    this.callbacks = new Map();\n    this.isInit = false;\n  }\n\n  /**\n   * Getter to get the services properties.\n   * This getter MUST be implementer by the service extending this class.\n   * @return {Object}\n   */\n  get props() {\n    throw new Error('The `props` getter must be implemented.');\n  }\n\n  /**\n   * Method to initialize the service behaviors.\n   * This method MUST be implemented by the service extending this class.\n   *\n   * @return {Service} The current instance\n   */\n  init() {\n    throw new Error('The `init` method must be implemented.');\n  }\n\n  /**\n   * Method to kill the service behaviors.\n   * This method MUST be implemented by the service extending this class.\n   *\n   * @return {Service} The current instance\n   */\n  kill() {\n    throw new Error('The `kill` method must be implemented.');\n  }\n\n  /**\n   * Add a callback.\n   *\n   * @param  {String}   key      The callback's identifier\n   * @param  {Function} callback The callback function\n   * @return {Service}           The current instance\n   */\n  add(key, callback) {\n    if (this.has(key)) {\n      throw new Error(`A callback with the key \\`${key}\\` has already been registered.`);\n    }\n\n    // Initialize the service when we add the first callback\n    if (this.callbacks.size === 0 && !this.isInit) {\n      this.init();\n      this.isInit = true;\n    }\n\n    this.callbacks.set(key, callback);\n    return this;\n  }\n\n  /**\n   * Test if a callback with the given key has already been added.\n   *\n   * @param  {String}  key The identifier to test\n   * @return {Boolean}     Whether or not the identifier already exists\n   */\n  has(key) {\n    return this.callbacks.has(key);\n  }\n\n  /**\n   * Get the callback tied to the given key.\n   *\n   * @param  {String}   key The identifier to get\n   * @return {Function}     The callback function\n   */\n  get(key) {\n    return this.callbacks.get(key);\n  }\n\n  /**\n   * Remove the callback tied to the given key.\n   *\n   * @param  {String} key The identifier to remove\n   * @return {Service}    The current instance\n   */\n  remove(key) {\n    this.callbacks.delete(key);\n\n    // Kill the service when we remove the last callback\n    if (this.callbacks.size === 0 && this.isInit) {\n      this.kill();\n      this.isInit = false;\n    }\n\n    return this;\n  }\n\n  /**\n   * Trigger each added callback with the given arguments.\n   *\n   * @param  {Array}   args All the arguments to apply to the callback\n   * @return {Service}      The current instance\n   */\n  trigger(...args) {\n    this.callbacks.forEach((callback) => {\n      callback(...args);\n    });\n\n    return this;\n  }\n}\n"],"file":"Service.js"}