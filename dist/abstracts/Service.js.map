{"version":3,"sources":["../../src/abstracts/Service.js"],"names":["testImplementation","obj","descriptors","Object","getOwnPropertyDescriptors","methods","keys","forEach","key","includes","Error","Service","callbacks","Map","isInit","getPrototypeOf","callback","has","size","init","set","get","kill","args"],"mappings":";;;;;;;;;;;;;AAAA;;;;;AAKA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAMC,WAAW,GAAGC,MAAM,CAACC,yBAAP,CAAiCH,GAAjC,CAApB;AACA,MAAMI,OAAO,GAAGF,MAAM,CAACG,IAAP,CAAYJ,WAAZ,CAAhB;AAEA,GAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0BK,OAA1B,CAAkC,UAACC,GAAD,EAAS;AACzC,QAAI,CAACH,OAAO,CAACI,QAAR,CAAiBD,GAAjB,CAAL,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,gBAAmBF,GAAnB,mCAAN;AACD;AACF,GAJD;AAMA,SAAO,IAAP;AACD;AAED;;;;;IAGqBG,O;AACnB;;;;;AAKA,qBAAc;AAAA;AACZ,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA,SAAKC,MAAL,GAAc,KAAd;AACAd,IAAAA,kBAAkB,CAACG,MAAM,CAACY,cAAP,CAAsB,IAAtB,CAAD,CAAlB;AACD;AAED;;;;;;;;;;2BAMO;AACL,aAAO,IAAP;AACD;AAED;;;;;;;;;2BAMO;AACL,aAAO,IAAP;AACD;AAED;;;;;;;;;;wBAOIP,G,EAAKQ,Q,EAAU;AACjB,UAAI,KAAKC,GAAL,CAAST,GAAT,CAAJ,EAAmB;AACjB,cAAM,IAAIE,KAAJ,oCAAuCF,GAAvC,oCAAN;AACD,OAHgB,CAKjB;;;AACA,UAAI,KAAKI,SAAL,CAAeM,IAAf,KAAwB,CAAxB,IAA6B,CAAC,KAAKJ,MAAvC,EAA+C;AAC7C,aAAKK,IAAL;AACA,aAAKL,MAAL,GAAc,IAAd;AACD;;AAED,WAAKF,SAAL,CAAeQ,GAAf,CAAmBZ,GAAnB,EAAwBQ,QAAxB;AACA,aAAO,IAAP;AACD;AAED;;;;;;;;;wBAMIR,G,EAAK;AACP,aAAO,KAAKI,SAAL,CAAeK,GAAf,CAAmBT,GAAnB,CAAP;AACD;AAED;;;;;;;;;wBAMIA,G,EAAK;AACP,aAAO,KAAKI,SAAL,CAAeS,GAAf,CAAmBb,GAAnB,CAAP;AACD;AAED;;;;;;;;;2BAMOA,G,EAAK;AACV,WAAKI,SAAL,WAAsBJ,GAAtB,EADU,CAGV;;AACA,UAAI,KAAKI,SAAL,CAAeM,IAAf,KAAwB,CAAxB,IAA6B,KAAKJ,MAAtC,EAA8C;AAC5C,aAAKQ,IAAL;AACA,aAAKR,MAAL,GAAc,KAAd;AACD;;AAED,aAAO,IAAP;AACD;AAED;;;;;;;;;8BAMiB;AAAA,wCAANS,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACf,WAAKX,SAAL,CAAeL,OAAf,CAAuB,UAAAS,QAAQ,EAAI;AACjCA,QAAAA,QAAQ,MAAR,SAAYO,IAAZ;AACD,OAFD;AAIA,aAAO,IAAP;AACD","sourcesContent":["/**\n * Test if the children classes implements this class correctly\n *\n * @return {Service} The current instance\n */\nfunction testImplementation(obj) {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const methods = Object.keys(descriptors);\n\n  ['init', 'kill', 'props'].forEach((key) => {\n    if (!methods.includes(key)) {\n      throw new Error(`The \\`${key}\\` method must be implemented.`);\n    }\n  });\n\n  return this;\n}\n\n/**\n * Service abstract class\n */\nexport default class Service {\n  /**\n   * Class constructor, used to test the abstract class implementation.\n   *\n   * @return {Service} The current instance\n   */\n  constructor() {\n    this.callbacks = new Map();\n    this.isInit = false;\n    testImplementation(Object.getPrototypeOf(this));\n  }\n\n  /**\n   * Method to initialize the service behaviors.\n   * This method MUST be implemented by the service implementing this class.\n   *\n   * @return {Service} The current instance\n   */\n  init() {\n    return this;\n  }\n\n  /**\n   * Method to kill the service behaviors.\n   * This method MUST be implemented by the service implementing this class.\n   *\n   * @return {Service} The current instance\n   */\n  kill() {\n    return this;\n  }\n\n  /**\n   * Add a callback.\n   *\n   * @param  {String}   key      The callback's identifier\n   * @param  {Function} callback The callback function\n   * @return {Service}           The current instance\n   */\n  add(key, callback) {\n    if (this.has(key)) {\n      throw new Error(`A callback with the key \\`${key}\\` has already been registered.`);\n    }\n\n    // Initialize the service when we add the first callback\n    if (this.callbacks.size === 0 && !this.isInit) {\n      this.init();\n      this.isInit = true;\n    }\n\n    this.callbacks.set(key, callback);\n    return this;\n  }\n\n  /**\n   * Test if a callback with the given key has already been added.\n   *\n   * @param  {String}  key The identifier to test\n   * @return {Boolean}     Whether or not the identifier already exists\n   */\n  has(key) {\n    return this.callbacks.has(key);\n  }\n\n  /**\n   * Get the callback tied to the given key.\n   *\n   * @param  {String}   key The identifier to get\n   * @return {Function}     The callback function\n   */\n  get(key) {\n    return this.callbacks.get(key);\n  }\n\n  /**\n   * Remove the callback tied to the given key.\n   *\n   * @param  {String} key The identifier to remove\n   * @return {Service}    The current instance\n   */\n  remove(key) {\n    this.callbacks.delete(key);\n\n    // Kill the service when we add the first callback\n    if (this.callbacks.size === 0 && this.isInit) {\n      this.kill();\n      this.isInit = false;\n    }\n\n    return this;\n  }\n\n  /**\n   * Trigger each added callback with the given arguments.\n   *\n   * @param  {Array}   args All the arguments to apply to the callback\n   * @return {Service}      The current instance\n   */\n  trigger(...args) {\n    this.callbacks.forEach(callback => {\n      callback(...args);\n    });\n\n    return this;\n  }\n}\n"],"file":"Service.js"}