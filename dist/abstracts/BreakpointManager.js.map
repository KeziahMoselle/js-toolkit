{"version":3,"sources":["../../src/abstracts/BreakpointManager.js"],"names":["testBreakpoints","breakpoints","props","breakpoint","forEach","breakpointKeys","instance","includes","$mount","$destroy","instances","BreakpointManager","element","add","$options","name","Error","Array","isArray","length","$id","map","bk","ComponentClass","prototype","__isChild__","$el","Object","defineProperty","get","Base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;AAMA,SAASA,eAAT,CAAyBC,WAAzB,EAAsC;AAAA,yBACb,uBAAYC,KAAZ,EADa;AAAA,MAC5BC,UAD4B,oBAC5BA,UAD4B;;AAEpCF,EAAAA,WAAW,CAACG,OAAZ,CAAoB,gBAAgC;AAAA;AAAA,QAA9BC,cAA8B;AAAA,QAAdC,QAAc;;AAClD,QAAID,cAAc,CAACE,QAAf,CAAwBJ,UAAxB,CAAJ,EAAyC;AACvCG,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,CAACG,QAAT;AACD;AACF,GAND;AAOD;AAED;;;;;;AAIA,IAAMC,SAAS,GAAG,EAAlB;AAEA;;;;IAGqBC,iB;;;;;AACnB;;;;;AAKA,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA;AACnB,8BAAMA,OAAN;;AADmB,qBAGI,sBAHJ;AAAA,QAGXC,GAHW,cAGXA,GAHW;AAAA,QAGNX,KAHM,cAGNA,KAHM;;AAAA,yBAIW,MAAKY,QAJhB;AAAA,QAIXC,IAJW,kBAIXA,IAJW;AAAA,QAILd,WAJK,kBAILA,WAJK,EAMnB;AACA;;AACA,QAAI,CAACC,KAAK,GAAGC,UAAb,EAAyB;AACvB,YAAM,IAAIa,KAAJ,YACAD,IADA,yEAAN;AAGD;;AAED,QAAI,CAACd,WAAL,EAAkB;AAChB,YAAM,IAAIe,KAAJ,YAAcD,IAAd,gDAAN;AACD;;AAED,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcjB,WAAd,CAAL,EAAiC;AAC/B,YAAM,IAAIe,KAAJ,YAAcD,IAAd,iDAAN;AACD;;AAED,QAAId,WAAW,CAACkB,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAIH,KAAJ,YACAD,IADA,wFAAN;AAGD;;AAEDL,IAAAA,SAAS,CAAC,MAAKU,GAAN,CAAT,GAAsBnB,WAAW,CAACoB,GAAZ,CAAgB,iBAA0B;AAAA;AAAA,UAAxBC,EAAwB;AAAA,UAApBC,cAAoB;;AAC9D;AACAA,MAAAA,cAAc,CAACC,SAAf,CAAyBC,WAAzB,GAAuC,IAAvC;AACA,UAAMnB,QAAQ,GAAG,IAAIiB,cAAJ,CAAmB,MAAKG,GAAxB,CAAjB;AACAC,MAAAA,MAAM,CAACC,cAAP,CAAsBtB,QAAtB,EAAgC,SAAhC,EAA2C;AAAEuB,QAAAA,GAAG,EAAE;AAAA;AAAA;AAAP,OAA3C;AACA,aAAO,CAACP,EAAD,EAAKhB,QAAL,CAAP;AACD,KANqB,CAAtB;AAQAO,IAAAA,GAAG,6BAAsB,MAAKO,GAA3B,GAAkC,YAAM;AACzCpB,MAAAA,eAAe,CAACU,SAAS,CAAC,MAAKU,GAAN,CAAV,CAAf;AACD,KAFE,CAAH;AAIA;AACD;AAED;;;;;;;;;6BAKS;AACPpB,MAAAA,eAAe,CAACU,SAAS,CAAC,KAAKU,GAAN,CAAV,CAAf;AACA;AACD;;;EAzD4CU,c","sourcesContent":["import Base from './Base';\nimport useResize from '../services/resize';\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {Base}           instance The component's instance.\n * @return {String|Boolean}          The action to call ($mount|$destroy) or false.\n */\nfunction testBreakpoints(breakpoints) {\n  const { breakpoint } = useResize().props();\n  breakpoints.forEach(([breakpointKeys, instance]) => {\n    if (breakpointKeys.includes(breakpoint)) {\n      instance.$mount();\n    } else {\n      instance.$destroy();\n    }\n  });\n}\n\n/**\n * A cache object to hold each BreakpointManager sub-instances.\n * @type {Object}\n */\nconst instances = {};\n\n/**\n * BreakpointManager class.\n */\nexport default class BreakpointManager extends Base {\n  /**\n   * Watch for the document resize to test the breakpoints.\n   * @param  {HTMLElement} element The component's root element.\n   * @return {BreakpointManager}          The current instance.\n   */\n  constructor(element) {\n    super(element);\n\n    const { add, props } = useResize();\n    const { name, breakpoints } = this.$options;\n\n    // Do nothing if no breakpoint has been defined.\n    // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n    if (!props().breakpoint) {\n      throw new Error(\n        `[${name}] The \\`BreakpointManager\\` class requires breakpoints to be defined.`\n      );\n    }\n\n    if (!breakpoints) {\n      throw new Error(`[${name}] The \\`breakpoint\\` option must be defined.`);\n    }\n\n    if (!Array.isArray(breakpoints)) {\n      throw new Error(`[${name}] The \\`breakpoint\\` option must be an array.`);\n    }\n\n    if (breakpoints.length < 2) {\n      throw new Error(\n        `[${name}] You must define at least 2 breakpoints when using the \\`BreakpointManager\\` class.`\n      );\n    }\n\n    instances[this.$id] = breakpoints.map(([bk, ComponentClass]) => {\n      // eslint-disable-next-line no-underscore-dangle\n      ComponentClass.prototype.__isChild__ = true;\n      const instance = new ComponentClass(this.$el);\n      Object.defineProperty(instance, '$parent', { get: () => this });\n      return [bk, instance];\n    });\n\n    add(`BreakpointManager-${this.$id}`, () => {\n      testBreakpoints(instances[this.$id]);\n    });\n\n    return this;\n  }\n\n  /**\n   * Override the default $mount method to prevent component's from being\n   * mounted when they should not.\n   * @return {BreakpointManager} The component's instance.\n   */\n  $mount() {\n    testBreakpoints(instances[this.$id]);\n    return super.$mount();\n  }\n}\n"],"file":"BreakpointManager.js"}