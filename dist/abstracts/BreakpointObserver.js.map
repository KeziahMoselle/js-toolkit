{"version":3,"sources":["../../src/abstracts/BreakpointObserver.js"],"names":["testBreakpoints","instance","breakpoint","props","$options","activeBreakpoints","inactiveBreakpoints","isInActiveBreakpoint","split","includes","isInInactiveBreakpoint","$log","BreakpointObserver","element","add","name","Error","message","$id","action","Base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;AAMA,SAASA,eAAT,CAAyBC,QAAzB,EAAgF;AAAA,MAA7CC,UAA6C,uEAAhC,uBAAYC,KAAZ,GAAoBD,UAAY;AAAA,2BAC3BD,QAAQ,CAACG,QADkB;AAAA,MACtEC,iBADsE,sBACtEA,iBADsE;AAAA,MACnDC,mBADmD,sBACnDA,mBADmD;AAE9E,MAAMC,oBAAoB,GACxBF,iBAAiB,IAAIA,iBAAiB,CAACG,KAAlB,CAAwB,GAAxB,EAA6BC,QAA7B,CAAsCP,UAAtC,CADvB;AAEA,MAAMQ,sBAAsB,GAC1BJ,mBAAmB,IAAIA,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,EAA+BC,QAA/B,CAAwCP,UAAxC,CADzB;AAGAD,EAAAA,QAAQ,CAACU,IAAT,CAAc,sBAAd,EAAsCJ,oBAAtC;AACAN,EAAAA,QAAQ,CAACU,IAAT,CAAc,wBAAd,EAAwCD,sBAAxC;;AAEA,MACGL,iBAAiB,IAAIE,oBAAtB,IACCD,mBAAmB,IAAI,CAACI,sBAF3B,EAGE;AACA,WAAO,QAAP;AACD;;AAED,MACGL,iBAAiB,IAAI,CAACE,oBAAvB,IACCD,mBAAmB,IAAII,sBAF1B,EAGE;AACA,WAAO,UAAP;AACD;;AAED,SAAO,EAAP;AACD;AAED;;;;;IAGqBE,kB;;;;;AACnB;;;;;AAKA,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;AACnB,8BAAMA,OAAN;;AADmB,qBAGI,sBAHJ;AAAA,QAGXC,GAHW,cAGXA,GAHW;AAAA,QAGNX,KAHM,cAGNA,KAHM;;AAAA,yBAIsC,MAAKC,QAJ3C;AAAA,QAIXC,iBAJW,kBAIXA,iBAJW;AAAA,QAIQC,mBAJR,kBAIQA,mBAJR;AAAA,QAI6BS,IAJ7B,kBAI6BA,IAJ7B,EAMnB;AACA;;AACA,QAAI,CAACZ,KAAK,GAAGD,UAAb,EAAyB;AACvB,YAAM,IAAIc,KAAJ,YACAD,IADA,0EAAN;AAGD,KAZkB,CAcnB;AACA;;;AACA,QACG,CAACV,iBAAD,IAAsB,CAACC,mBAAxB,IACCD,iBAAiB,IAAIC,mBAFxB,EAGE;AACA,UAAIW,OAAO,cAAOF,IAAP,OAAX;;AACA,UAAI,CAACV,iBAAD,IAAsB,CAACC,mBAA3B,EAAgD;AAC9CW,QAAAA,OAAO,IACL,yFADF;AAED,OAHD,MAGO;AACLA,QAAAA,OAAO,IACL,gGADF;AAED;;AACD,YAAM,IAAID,KAAJ,CAAUC,OAAV,CAAN;AACD;;AAEDH,IAAAA,GAAG,8BAAuB,MAAKI,GAA5B,GAAmC,gBAAoB;AAAA,UAAjBhB,UAAiB,QAAjBA,UAAiB;AACxD,UAAMiB,MAAM,GAAGnB,eAAe,8CAAOE,UAAP,CAA9B;;AACA,UAAIiB,MAAJ,EAAY;AACV,cAAKA,MAAL;AACD;AACF,KALE,CAAH;AAOA;AACD;AAED;;;;;;;;;6BAKS;AACP,UAAMA,MAAM,GAAGnB,eAAe,CAAC,IAAD,CAA9B;;AACA,UAAImB,MAAM,KAAK,QAAf,EAAyB;AACvB;AACD;;AAED,aAAO,IAAP;AACD;;;EA3D6CC,c","sourcesContent":["import Base from './Base';\nimport useResize from '../services/resize';\n\n/**\n * Test the breakpoins of the given Base instance and return the hook to call.\n *\n * @param  {BreakpointObserver} instance The component's instance.\n * @return {Sring}                       The action to trigger.\n */\nfunction testBreakpoints(instance, breakpoint = useResize().props().breakpoint) {\n  const { activeBreakpoints, inactiveBreakpoints } = instance.$options;\n  const isInActiveBreakpoint =\n    activeBreakpoints && activeBreakpoints.split(' ').includes(breakpoint);\n  const isInInactiveBreakpoint =\n    inactiveBreakpoints && inactiveBreakpoints.split(' ').includes(breakpoint);\n\n  instance.$log('isInActiveBreakpoint', isInActiveBreakpoint);\n  instance.$log('isInInactiveBreakpoint', isInInactiveBreakpoint);\n\n  if (\n    (activeBreakpoints && isInActiveBreakpoint) ||\n    (inactiveBreakpoints && !isInInactiveBreakpoint)\n  ) {\n    return '$mount';\n  }\n\n  if (\n    (activeBreakpoints && !isInActiveBreakpoint) ||\n    (inactiveBreakpoints && isInInactiveBreakpoint)\n  ) {\n    return '$destroy';\n  }\n\n  return '';\n}\n\n/**\n * BreakpointObserver class.\n */\nexport default class BreakpointObserver extends Base {\n  /**\n   * Watch for the document resize to test the breakpoints.\n   * @param  {HTMLElement} element The component's root element.\n   * @return {BreakpointObserver}          The current instance.\n   */\n  constructor(element) {\n    super(element);\n\n    const { add, props } = useResize();\n    const { activeBreakpoints, inactiveBreakpoints, name } = this.$options;\n\n    // Do nothing if no breakpoint has been defined.\n    // @see https://js-toolkit.meta.fr/services/resize.html#breakpoint\n    if (!props().breakpoint) {\n      throw new Error(\n        `[${name}] The \\`BreakpointObserver\\` class requires breakpoints to be defined.`\n      );\n    }\n\n    // Do nothing if no configuration set or if both configuration are set, as\n    // they are not compatible.\n    if (\n      (!activeBreakpoints && !inactiveBreakpoints) ||\n      (activeBreakpoints && inactiveBreakpoints)\n    ) {\n      let message = `[${name}] `;\n      if (!activeBreakpoints && !inactiveBreakpoints) {\n        message +=\n          'Missing configuration: specify the `activeBreakpoints` or `inactiveBreakpoints` config.';\n      } else {\n        message +=\n          'Incorrect configuration: the `activeBreakpoints` and `inactiveBreakpoints` are not compatible.';\n      }\n      throw new Error(message);\n    }\n\n    add(`BreakpointObserver-${this.$id}`, ({ breakpoint }) => {\n      const action = testBreakpoints(this, breakpoint);\n      if (action) {\n        this[action]();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Override the default $mount method to prevent component's from being\n   * mounted when they should not.\n   * @return {BreakpointObserver} The component's instance.\n   */\n  $mount() {\n    const action = testBreakpoints(this);\n    if (action === '$mount') {\n      return super.$mount();\n    }\n\n    return this;\n  }\n}\n"],"file":"BreakpointObserver.js"}