{"version":3,"sources":["../../src/abstracts/EventManager.js"],"names":["EventManager","event","listener","Array","isArray","_events","push","$off","index","indexOf","splice","args","forEach","apply","instance","$on","handler"],"mappings":";;;;IAIqBA,Y;;;;qCAET,E;;;;;wBASNC,K,EAAOC,Q,EAAU;AAAA;;AACnB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKC,OAAL,CAAaJ,KAAb,CAAd,CAAL,EAAyC;AACvC,aAAKI,OAAL,CAAaJ,KAAb,IAAsB,EAAtB;AACD;;AACD,WAAKI,OAAL,CAAaJ,KAAb,EAAoBK,IAApB,CAAyBJ,QAAzB;;AAEA,aAAO,YAAM;AACX,QAAA,KAAI,CAACK,IAAL,CAAUN,KAAV,EAAiBC,QAAjB;AACD,OAFD;AAGD;;;yBASID,K,EAAOC,Q,EAAU;AAEpB,UAAI,CAACD,KAAL,EAAY;AACV,aAAKI,OAAL,GAAe,EAAf;AACA,eAAO,IAAP;AACD;;AAGD,UAAI,CAACH,QAAL,EAAe;AACb,aAAKG,OAAL,CAAaJ,KAAb,IAAsB,EAAtB;AACA,eAAO,IAAP;AACD;;AAED,UAAMO,KAAK,GAAG,KAAKH,OAAL,CAAaJ,KAAb,EAAoBQ,OAApB,CAA4BP,QAA5B,CAAd;;AAEA,UAAIM,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAKH,OAAL,CAAaJ,KAAb,EAAoBS,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;AACD;;AAED,aAAO,IAAP;AACD;;;0BASKP,K,EAAgB;AAAA;;AAAA,wCAANU,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACpB,UAAI,CAACR,KAAK,CAACC,OAAN,CAAc,KAAKC,OAAL,CAAaJ,KAAb,CAAd,CAAL,EAAyC;AACvC,eAAO,IAAP;AACD;;AAED,WAAKI,OAAL,CAAaJ,KAAb,EAAoBW,OAApB,CAA4B,UAACV,QAAD,EAAc;AACxCA,QAAAA,QAAQ,CAACW,KAAT,CAAe,MAAf,EAAqBF,IAArB;AACD,OAFD;;AAGA,aAAO,IAAP;AACD;;;0BASKV,K,EAAOC,Q,EAAU;AACrB,UAAMY,QAAQ,GAAG,IAAjB;AACA,WAAKC,GAAL,CACEd,KADF,EAKE,SAASe,OAAT,GAA0B;AACxBF,QAAAA,QAAQ,CAACP,IAAT,CAAcN,KAAd,EAAqBe,OAArB;;AADwB,2CAANL,IAAM;AAANA,UAAAA,IAAM;AAAA;;AAExBT,QAAAA,QAAQ,CAACW,KAAT,CAAeC,QAAf,EAAyBH,IAAzB;AACD,OARH;AAUA,aAAO,IAAP;AACD;;;;;;SAzFkBX,Y","sourcesContent":["/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_events\"] }] */\n/**\n * Event management class.\n */\nexport default class EventManager {\n  /** @type {{[eventName:string]: Array<Function>}} An object to store the events */\n  _events = {};\n\n  /**\n   * Bind a listener function to an event.\n   *\n   * @param  {String}   event    Name of the event.\n   * @param  {Function} listener Function to be called.\n   * @return {Function}          A function to unbind the listener.\n   */\n  $on(event, listener) {\n    if (!Array.isArray(this._events[event])) {\n      this._events[event] = [];\n    }\n    this._events[event].push(listener);\n\n    return () => {\n      this.$off(event, listener);\n    };\n  }\n\n  /**\n   * Unbind a listener function from an event.\n   *\n   * @param  {String}       event    Name of the event.\n   * @param  {Function}     listener Function to be removed.\n   * @return {EventManager}          The current instance.\n   */\n  $off(event, listener) {\n    // If no event specified, we remove them all.\n    if (!event) {\n      this._events = {};\n      return this;\n    }\n    // If no listener have been specified, we remove all\n    // the listeners for the given event.\n    if (!listener) {\n      this._events[event] = [];\n      return this;\n    }\n\n    const index = this._events[event].indexOf(listener);\n\n    if (index > -1) {\n      this._events[event].splice(index, 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param  {String}       event Name of the event.\n   * @param  {Array}        args  The arguments to apply to the functions bound to this event.\n   * @return {EventManager}       The current instance.\n   */\n  $emit(event, ...args) {\n    if (!Array.isArray(this._events[event])) {\n      return this;\n    }\n\n    this._events[event].forEach((listener) => {\n      listener.apply(this, args);\n    });\n    return this;\n  }\n\n  /**\n   * Bind a listener function to an event for one execution only.\n   *\n   * @param  {String}       event    Name of the event.\n   * @param  {Function}     listener Function to be called.\n   * @return {EventManager}          The current instance.\n   */\n  $once(event, listener) {\n    const instance = this;\n    this.$on(\n      event,\n      /**\n       * @param {...any} args\n       */\n      function handler(...args) {\n        instance.$off(event, handler);\n        listener.apply(instance, args);\n      }\n    );\n    return this;\n  }\n}\n"],"file":"EventManager.js"}