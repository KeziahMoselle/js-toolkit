{"version":3,"sources":["../../src/abstracts/EventManager.js"],"names":["EventManager","event","listener","Array","isArray","events","push","$off","index","indexOf","splice","args","forEach","apply","instance","$on","handler"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;IAQqBA,Y;;;qDAEV,E;;;;;;AAET;;;;;;;wBAOIC,K,EAAOC,Q,EAAU;AAAA;;AACnB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKC,MAAL,CAAYJ,KAAZ,CAAd,CAAL,EAAwC;AACtC,aAAKI,MAAL,CAAYJ,KAAZ,IAAqB,EAArB;AACD;;AACD,WAAKI,MAAL,CAAYJ,KAAZ,EAAmBK,IAAnB,CAAwBJ,QAAxB;AAEA,aAAO,YAAM;AACX,QAAA,KAAI,CAACK,IAAL,CAAUN,KAAV,EAAiBC,QAAjB;AACD,OAFD;AAGD;AAED;;;;;;;;;;yBAOKD,K,EAAOC,Q,EAAU;AACpB,UAAI,CAACC,KAAK,CAACC,OAAN,CAAc,KAAKC,MAAL,CAAYJ,KAAZ,CAAd,CAAL,EAAwC;AACtC,eAAO,IAAP;AACD,OAHmB,CAIpB;;;AACA,UAAI,CAACA,KAAL,EAAY;AACV,aAAKI,MAAL,GAAc,EAAd;AACA,eAAO,IAAP;AACD,OARmB,CAUpB;AACA;;;AACA,UAAI,CAACH,QAAL,EAAe;AACb,aAAKG,MAAL,CAAYJ,KAAZ,IAAqB,EAArB;AACA,eAAO,IAAP;AACD;;AAED,UAAMO,KAAK,GAAG,KAAKH,MAAL,CAAYJ,KAAZ,EAAmBQ,OAAnB,CAA2BP,QAA3B,CAAd;;AAEA,UAAIM,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,aAAKH,MAAL,CAAYJ,KAAZ,EAAmBS,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC;AACD;;AAED,aAAO,IAAP;AACD;AAED;;;;;;;;;;0BAOMP,K,EAAgB;AAAA;;AAAA,wCAANU,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACpB,UAAI,CAACR,KAAK,CAACC,OAAN,CAAc,KAAKC,MAAL,CAAYJ,KAAZ,CAAd,CAAL,EAAwC;AACtC,eAAO,IAAP;AACD;;AAED,WAAKI,MAAL,CAAYJ,KAAZ,EAAmBW,OAAnB,CAA2B,UAAAV,QAAQ,EAAI;AACrCA,QAAAA,QAAQ,CAACW,KAAT,CAAe,MAAf,EAAqBF,IAArB;AACD,OAFD;AAGA,aAAO,IAAP;AACD;AAED;;;;;;;;;;0BAOMV,K,EAAOC,Q,EAAU;AACrB,UAAMY,QAAQ,GAAG,IAAjB;AACA,WAAKC,GAAL,CAASd,KAAT,EAAgB,SAASe,OAAT,GAA0B;AACxCF,QAAAA,QAAQ,CAACP,IAAT,CAAcN,KAAd,EAAqBe,OAArB;;AADwC,2CAANL,IAAM;AAANA,UAAAA,IAAM;AAAA;;AAExCT,QAAAA,QAAQ,CAACW,KAAT,CAAeC,QAAf,EAAyBH,IAAzB;AACD,OAHD;AAIA,aAAO,IAAP;AACD","sourcesContent":["/**\n * Event management class.\n *\n * @method $on    Bind a given function to the given event.\n * @method $off   Unbind the given function from the given event.\n * @method $once  Bind a given function to the given event once.\n * @method $emit  Emit an event with custom props.\n */\nexport default class EventManager {\n  /** @type {Object} An object to store the events */\n  events = {};\n\n  /**\n   * Bind a listener function to an event.\n   *\n   * @param  {String}   event    Name of the event.\n   * @param  {String}   listener Function to be called.\n   * @return {Function}          A function to unbind the listener.\n   */\n  $on(event, listener) {\n    if (!Array.isArray(this.events[event])) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n\n    return () => {\n      this.$off(event, listener);\n    };\n  }\n\n  /**\n   * Unbind a listener function from an event.\n   *\n   * @param  {String}       event    Name of the event.\n   * @param  {String}       listener Function to be removed.\n   * @return {EventManager}          The current instance.\n   */\n  $off(event, listener) {\n    if (!Array.isArray(this.events[event])) {\n      return this;\n    }\n    // If no event specified, we remove them all.\n    if (!event) {\n      this.events = {};\n      return this;\n    }\n\n    // If no listener have been specified, we remove all\n    // the listeners for the given event.\n    if (!listener) {\n      this.events[event] = [];\n      return this;\n    }\n\n    const index = this.events[event].indexOf(listener);\n\n    if (index > -1) {\n      this.events[event].splice(index, 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Emits an event.\n   *\n   * @param  {String}       event Name of the event.\n   * @param  {Array}        args  The arguments to apply to the functions bound to this event.\n   * @return {EventManager}       The current instance.\n   */\n  $emit(event, ...args) {\n    if (!Array.isArray(this.events[event])) {\n      return this;\n    }\n\n    this.events[event].forEach(listener => {\n      listener.apply(this, args);\n    });\n    return this;\n  }\n\n  /**\n   * Bind a listener function to an event for one execution only.\n   *\n   * @param  {String}       event    Name of the event.\n   * @param  {String}       listener Function to be called.\n   * @return {EventManager}          The current instance.\n   */\n  $once(event, listener) {\n    const instance = this;\n    this.$on(event, function handler(...args) {\n      instance.$off(event, handler);\n      listener.apply(instance, args);\n    });\n    return this;\n  }\n}\n"],"file":"EventManager.js"}