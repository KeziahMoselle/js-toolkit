{"version":3,"sources":["../../src/services/resize.js"],"names":["Resize","handler","trigger","props","bind","window","addEventListener","removeEventListener","width","innerWidth","height","innerHeight","ratio","orientation","breakpointElement","breakpoint","breakpoints","document","querySelector","getComputedStyle","getPropertyValue","replace","split","Service","resize","add","remove"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;;;IAWMA,M;;;;;;;;;;;;;AACJ;;;;;2BAKO;AAAA;;AACL,WAAKC,OAAL,GAAe,uBAAS,YAAM;AAC5B,QAAA,KAAI,CAACC,OAAL,CAAa,KAAI,CAACC,KAAlB;AACD,OAFc,EAEZC,IAFY,CAEP,IAFO,CAAf;AAGAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,OAAvC;AACD;AAED;;;;;;;;2BAKO;AACLI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKN,OAA1C;AACD;AAED;;;;;;;;wBAKY;AACV,UAAME,KAAK,GAAG;AACZK,QAAAA,KAAK,EAAEH,MAAM,CAACI,UADF;AAEZC,QAAAA,MAAM,EAAEL,MAAM,CAACM,WAFH;AAGZC,QAAAA,KAAK,EAAEP,MAAM,CAACI,UAAP,GAAoBJ,MAAM,CAACM,WAHtB;AAIZE,QAAAA,WAAW,EAAE;AAJD,OAAd;;AAOA,UAAIV,KAAK,CAACS,KAAN,GAAc,CAAlB,EAAqB;AACnBT,QAAAA,KAAK,CAACU,WAAN,GAAoB,WAApB;AACD;;AAED,UAAIV,KAAK,CAACS,KAAN,GAAc,CAAlB,EAAqB;AACnBT,QAAAA,KAAK,CAACU,WAAN,GAAoB,UAApB;AACD;;AAED,UAAI,KAAKC,iBAAT,EAA4B;AAC1BX,QAAAA,KAAK,CAACY,UAAN,GAAmB,KAAKA,UAAxB;AACAZ,QAAAA,KAAK,CAACa,WAAN,GAAoB,KAAKA,WAAzB;AACD;;AAED,aAAOb,KAAP;AACD;AAED;;;;;;;wBAIwB;AACtB,aAAOc,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,KAA+C,IAAtD;AACD;AAED;;;;;;;wBAIiB;AACf,aAAOb,MAAM,CACVc,gBADI,CACa,KAAKL,iBADlB,EACqC,UADrC,EAEJM,gBAFI,CAEa,SAFb,EAGJC,OAHI,CAGI,IAHJ,EAGU,EAHV,CAAP;AAID;AAED;;;;;;;wBAIkB;AAChB,UAAML,WAAW,GAAGX,MAAM,CACvBc,gBADiB,CACA,KAAKL,iBADL,EACwB,SADxB,EAEjBM,gBAFiB,CAEA,SAFA,EAGjBC,OAHiB,CAGT,IAHS,EAGH,EAHG,CAApB;AAKA,aAAOL,WAAW,CAACM,KAAZ,CAAkB,GAAlB,CAAP;AACD;;;EAjFkBC,iB;;AAoFrB,IAAIC,MAAM,GAAG,IAAb;;eAEe,oBAAM;AACnB,MAAI,CAACA,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,IAAIxB,MAAJ,EAAT;AACD;;AAED,MAAMyB,GAAG,GAAGD,MAAM,CAACC,GAAP,CAAWrB,IAAX,CAAgBoB,MAAhB,CAAZ;AACA,MAAME,MAAM,GAAGF,MAAM,CAACE,MAAP,CAActB,IAAd,CAAmBoB,MAAnB,CAAf;;AACA,MAAMrB,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMqB,MAAM,CAACrB,KAAb;AAAA,GAAd;;AAEA,SAAO;AACLsB,IAAAA,GAAG,EAAHA,GADK;AAELC,IAAAA,MAAM,EAANA,MAFK;AAGLvB,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD,C","sourcesContent":["import Service from '../abstracts/Service';\nimport debounce from '../utils/debounce';\n\n/**\n * Resize service\n *\n * ```\n * import { useResize } from '@studiometa/js/services';\n * const { add, remove, props } = useResize();\n * add(key, (props) => {});\n * remove(key);\n * props();\n * ```\n */\nclass Resize extends Service {\n  /**\n   * Bind the handler to the resize event.\n   *\n   * @return {void}\n   */\n  init() {\n    this.handler = debounce(() => {\n      this.trigger(this.props);\n    }).bind(this);\n    window.addEventListener('resize', this.handler);\n  }\n\n  /**\n   * Unbind the handler from the resize event.\n   *\n   * @return {void}\n   */\n  kill() {\n    window.removeEventListener('resize', this.handler);\n  }\n\n  /**\n   * Get resize props.\n   *\n   * @type {Object}\n   */\n  get props() {\n    const props = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      ratio: window.innerWidth / window.innerHeight,\n      orientation: 'square',\n    };\n\n    if (props.ratio > 1) {\n      props.orientation = 'landscape';\n    }\n\n    if (props.ratio < 1) {\n      props.orientation = 'portrait';\n    }\n\n    if (this.breakpointElement) {\n      props.breakpoint = this.breakpoint;\n      props.breakpoints = this.breakpoints;\n    }\n\n    return props;\n  }\n\n  /**\n   * The element holding the breakpoints data.\n   * @return {HTMLElement}\n   */\n  get breakpointElement() {\n    return document.querySelector('[data-breakpoint]') || null;\n  }\n\n  /**\n   * Get the current breakpoint.\n   * @return {String}\n   */\n  get breakpoint() {\n    return window\n      .getComputedStyle(this.breakpointElement, '::before')\n      .getPropertyValue('content')\n      .replace(/\"/g, '');\n  }\n\n  /**\n   * Get all breakpoints.\n   * @return {Array}\n   */\n  get breakpoints() {\n    const breakpoints = window\n      .getComputedStyle(this.breakpointElement, '::after')\n      .getPropertyValue('content')\n      .replace(/\"/g, '');\n\n    return breakpoints.split(',');\n  }\n}\n\nlet resize = null;\n\nexport default () => {\n  if (!resize) {\n    resize = new Resize();\n  }\n\n  const add = resize.add.bind(resize);\n  const remove = resize.remove.bind(resize);\n  const props = () => resize.props;\n\n  return {\n    add,\n    remove,\n    props,\n  };\n};\n"],"file":"resize.js"}