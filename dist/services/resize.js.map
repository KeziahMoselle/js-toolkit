{"version":3,"sources":["../../src/services/resize.js"],"names":["Service","debounce","Resize","handler","trigger","props","bind","canUseResizeObserver","resizeObserver","ResizeObserver","observe","document","documentElement","window","addEventListener","disconnect","removeEventListener","width","innerWidth","height","innerHeight","ratio","orientation","breakpointElement","breakpoint","breakpoints","querySelector","getComputedStyle","getPropertyValue","replace","split","resize","useResize","add","remove","has"],"mappings":"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","sourcesContent":["import Service from '../abstracts/Service';\nimport debounce from '../utils/debounce';\n\n/**\n * @typedef {import('./index').ServiceInterface} ServiceInterface\n */\n\n/**\n * @typedef {Object} ResizeServiceProps\n * @property {Number} width\n * @property {Number} height\n * @property {Number} ratio\n * @property {'square'|'landscape'|'portrait'} orientation\n * @property {String} [breakpoint]\n * @property {String[]} [breakpoints]\n */\n\n/**\n * @typedef {Object} ResizeService\n * @property {(key:String, callback:(props:ResizeServiceProps) => void) => void} add\n *   Add a function to the resize service. The key must be uniq.\n * @property {() => ResizeServiceProps} props\n *   Get the current values of the resize service props.\n */\n\n/**\n * Resize service\n *\n * ```\n * import { useResize } from '@studiometa/js/services';\n * const { add, remove, props } = useResize();\n * add(key, (props) => {});\n * remove(key);\n * props();\n * ```\n */\nclass Resize extends Service {\n  /**\n   * Bind the handler to the resize event.\n   *\n   * @return {this}\n   */\n  init() {\n    this.handler = debounce(() => {\n      this.trigger(this.props);\n    }).bind(this);\n\n    if (this.canUseResizeObserver) {\n      // @ts-ignore\n      this.resizeObserver = new ResizeObserver(this.handler);\n      this.resizeObserver.observe(document.documentElement);\n    } else {\n      window.addEventListener('resize', this.handler);\n    }\n\n    return this;\n  }\n\n  /**\n   * Unbind the handler from the resize event.\n   *\n   * @return {this}\n   */\n  kill() {\n    if (this.canUseResizeObserver) {\n      this.resizeObserver.disconnect();\n    } else {\n      window.removeEventListener('resize', this.handler);\n    }\n    delete this.resizeObserver;\n\n    return this;\n  }\n\n  /**\n   * Get resize props.\n   *\n   * @type {ResizeServiceProps}\n   */\n  get props() {\n    /** @type {ResizeServiceProps} [description] */\n    const props = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      ratio: window.innerWidth / window.innerHeight,\n      orientation: 'square',\n    };\n\n    if (props.ratio > 1) {\n      props.orientation = 'landscape';\n    }\n\n    if (props.ratio < 1) {\n      props.orientation = 'portrait';\n    }\n\n    if (this.breakpointElement) {\n      props.breakpoint = this.breakpoint;\n      props.breakpoints = this.breakpoints;\n    }\n\n    return props;\n  }\n\n  /**\n   * The element holding the breakpoints data.\n   * @return {HTMLElement}\n   */\n  get breakpointElement() {\n    return document.querySelector('[data-breakpoint]') || null;\n  }\n\n  /**\n   * Get the current breakpoint.\n   * @return {String}\n   */\n  get breakpoint() {\n    return window\n      .getComputedStyle(this.breakpointElement, '::before')\n      .getPropertyValue('content')\n      .replace(/\"/g, '');\n  }\n\n  /**\n   * Get all breakpoints.\n   * @return {Array}\n   */\n  get breakpoints() {\n    const breakpoints = window\n      .getComputedStyle(this.breakpointElement, '::after')\n      .getPropertyValue('content')\n      .replace(/\"/g, '');\n\n    return breakpoints.split(',');\n  }\n\n  /**\n   * Test if we can use the `ResizeObserver` API.\n   * @return {Boolean}\n   */\n  get canUseResizeObserver() {\n    // @ts-ignore\n    return typeof window.ResizeObserver !== 'undefined';\n  }\n}\n\nlet resize = null;\n\n/**\n * Use the resize service.\n *\n * ```js\n * import useResize from '@studiometa/js-toolkit/services/resize';\n * const { add, remove, props } = useResize();\n * add(key, (props) => {});\n * remove(key);\n * props();\n * ```\n * @return {ServiceInterface & ResizeService}\n */\nexport default function useResize() {\n  if (!resize) {\n    resize = new Resize();\n  }\n\n  const add = resize.add.bind(resize);\n  const remove = resize.remove.bind(resize);\n  const has = resize.has.bind(resize);\n  const props = () => resize.props;\n\n  return {\n    add,\n    remove,\n    has,\n    props,\n  };\n}\n"],"file":"resize.js"}