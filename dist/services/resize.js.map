{"version":3,"sources":["../../src/services/resize.js"],"names":["Resize","handler","trigger","props","bind","window","addEventListener","breakpointElement","document","querySelector","removeEventListener","width","innerWidth","height","innerHeight","ratio","orientation","breakpoint","breakpoints","getComputedStyle","getPropertyValue","replace","split","Service","resize","add","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;;;;IAWMA,M;;;;;;;;;;;;;;;0GAEgB,I;;;;;;;AAEpB;;;;;2BAKO;AAAA;;AACL,WAAKC,OAAL,GAAe,qBAAS,YAAM;AAC5B,QAAA,MAAI,CAACC,OAAL,CAAa,MAAI,CAACC,KAAlB;AACD,OAFc,EAEZC,IAFY,CAEP,IAFO,CAAf;AAGAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,OAAvC;AAEA,WAAKM,iBAAL,GAAyBC,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,KAA+C,IAAxE;AACD;AAED;;;;;;;;2BAKO;AACLJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqC,KAAKT,OAA1C;AACD;AAED;;;;;;;;wBAKY;AACV,UAAME,KAAK,GAAG;AACZQ,QAAAA,KAAK,EAAEN,MAAM,CAACO,UADF;AAEZC,QAAAA,MAAM,EAAER,MAAM,CAACS,WAFH;AAGZC,QAAAA,KAAK,EAAEV,MAAM,CAACO,UAAP,GAAoBP,MAAM,CAACS,WAHtB;AAIZE,QAAAA,WAAW,EAAE;AAJD,OAAd;;AAOA,UAAIb,KAAK,CAACY,KAAN,GAAc,CAAlB,EAAqB;AACnBZ,QAAAA,KAAK,CAACa,WAAN,GAAoB,WAApB;AACD;;AAED,UAAIb,KAAK,CAACY,KAAN,GAAc,CAAlB,EAAqB;AACnBZ,QAAAA,KAAK,CAACa,WAAN,GAAoB,UAApB;AACD;;AAED,UAAI,KAAKT,iBAAT,EAA4B;AAC1BJ,QAAAA,KAAK,CAACc,UAAN,GAAmB,KAAKA,UAAxB;AACAd,QAAAA,KAAK,CAACe,WAAN,GAAoB,KAAKA,WAAzB;AACD;;AAED,aAAOf,KAAP;AACD;AAED;;;;;;;wBAIiB;AACf,aACEE,MAAM,CACHc,gBADH,CACoB,KAAKZ,iBADzB,EAC4C,UAD5C,EAEGa,gBAFH,CAEoB,SAFpB,EAGGC,OAHH,CAGW,IAHX,EAGiB,EAHjB,KAGwB,EAJ1B;AAMD;AAED;;;;;;;wBAIkB;AAChB,UAAMH,WAAW,GAAGb,MAAM,CACvBc,gBADiB,CACA,KAAKZ,iBADL,EACwB,SADxB,EAEjBa,gBAFiB,CAEA,SAFA,EAGjBC,OAHiB,CAGT,IAHS,EAGH,EAHG,CAApB;AAKA,aAAOH,WAAW,CAACI,KAAZ,CAAkB,GAAlB,CAAP;AACD;;;EAhFkBC,kB;;AAmFrB,IAAMC,MAAM,GAAG,IAAIxB,MAAJ,EAAf;AACA,IAAMyB,GAAG,GAAGD,MAAM,CAACC,GAAP,CAAWrB,IAAX,CAAgBoB,MAAhB,CAAZ;AACA,IAAME,MAAM,GAAGF,MAAM,CAACE,MAAP,CAActB,IAAd,CAAmBoB,MAAnB,CAAf;;AACA,IAAMrB,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAMqB,MAAM,CAACrB,KAAb;AAAA,CAAd;;eAEe;AAAA,SAAO;AACpBsB,IAAAA,GAAG,EAAHA,GADoB;AAEpBC,IAAAA,MAAM,EAANA,MAFoB;AAGpBvB,IAAAA,KAAK,EAALA;AAHoB,GAAP;AAAA,C","sourcesContent":["import { Service } from '../abstracts';\nimport { debounce } from '../utils';\n\n/**\n * Resize service\n *\n * ```\n * import { useResize } from '@studiometa/js/services';\n * const { add, remove, props } = useResize();\n * add(key, (props) => {});\n * remove(key);\n * props();\n * ```\n */\nclass Resize extends Service {\n  /** @type {HTMLElement} The element holding the breakpoints data. */\n  breakpointElement = null;\n\n  /**\n   * Bind the handler to the resize event.\n   *\n   * @return {void}\n   */\n  init() {\n    this.handler = debounce(() => {\n      this.trigger(this.props);\n    }).bind(this);\n    window.addEventListener('resize', this.handler);\n\n    this.breakpointElement = document.querySelector('[data-breakpoint]') || null;\n  }\n\n  /**\n   * Unbind the handler from the resize event.\n   *\n   * @return {void}\n   */\n  kill() {\n    window.removeEventListener('resize', this.handler);\n  }\n\n  /**\n   * Get resize props.\n   *\n   * @type {Object}\n   */\n  get props() {\n    const props = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      ratio: window.innerWidth / window.innerHeight,\n      orientation: 'square',\n    };\n\n    if (props.ratio > 1) {\n      props.orientation = 'landscape';\n    }\n\n    if (props.ratio < 1) {\n      props.orientation = 'portrait';\n    }\n\n    if (this.breakpointElement) {\n      props.breakpoint = this.breakpoint;\n      props.breakpoints = this.breakpoints;\n    }\n\n    return props;\n  }\n\n  /**\n   * Get the current breakpoint.\n   * @return {String}\n   */\n  get breakpoint() {\n    return (\n      window\n        .getComputedStyle(this.breakpointElement, '::before')\n        .getPropertyValue('content')\n        .replace(/\"/g, '') || ''\n    );\n  }\n\n  /**\n   * Get all breakpoints.\n   * @return {Array}\n   */\n  get breakpoints() {\n    const breakpoints = window\n      .getComputedStyle(this.breakpointElement, '::after')\n      .getPropertyValue('content')\n      .replace(/\"/g, '');\n\n    return breakpoints.split(',');\n  }\n}\n\nconst resize = new Resize();\nconst add = resize.add.bind(resize);\nconst remove = resize.remove.bind(resize);\nconst props = () => resize.props;\n\nexport default () => ({\n  add,\n  remove,\n  props,\n});\n"],"file":"resize.js"}